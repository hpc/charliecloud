#!/bin/bash

libexec="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
. "${libexec}/base.sh"
. "${libexec}/version.sh"

# shellcheck disable=SC2034
usage=$(cat <<EOF
Run the Charliecloud test suite.

Usage:

  $ $(basename "$0") [PHASE] [OPTIONS]
EOF
)

check_builder () {
    printf "\nchecking builder: "
    case $CH_BUILDER in
    ch-grow)
        if ! ("${ch_bin}/ch-grow" --dependencies); then
            fatal 'builder: ch-grow: missing dependencies'
        fi
        bl=$(readlink -f "$ch_bin"/ch-grow)
        bv=$("$bl" --version)
        ;;
    buildah)
        ;&
    buildah-runc)
        ;&
    buildah-setuid)
        if (! command -v buildah &> /dev/null); then
            fatal 'builder: buildah: not installed.'
        fi
        bl=$(command -v buildah)
        bv=$(buildah --version | awk '{print $3}')
        min='1.11.2'
        ;;
    docker)
        if (! command -v docker &> /dev/null); then
            fatal 'builder: docker: not installed'
        fi
        bl=$(command -v docker)
        bv=$(docker --version | awk '{print $3}' | sed -e 's/,//')
        ;;
    *)
        fatal "builder: $CH_BUILDER: not supported"
        ;;
    esac
    printf '%s %s: OK\n\n' "$bl" "$bv"
    check_min_ver 'builder' "$min" "$bv"
}

check_min_ver () {
    if [[ $(printf '%s\n%s\n' "$2" "$3" | sort -V | head -n1) != "$2" ]]; then
        fatal "$1: mininum version $2"
    fi
}

check_scope () {
    case $1 in
    quick|standard|full)
        return 0
        ;;
    *)
        fatal "scope: invalid: $1"
        ;;
    esac
}

check_tardir () {
    printf '\nchecking tarball directory: %s: ' "$CH_TEST_TARDIR"
    # The run phase requires artifacts from a successful build phase. Thus,
    # we check sanity based on the minimal set of artifacts (quick scope).
    check_tardir_file alpine39{.tar.gz,.sqfs,.pq_missing}
    check_tardir_file alpine39_dp{.tar.gz,.sqfs,.pq_missing}
    check_tardir_file chtest{.tar.gz,.sqfs,.pq_missing}
    printf 'OK\n'
}

check_tardir_file () {
    local missing
    for f in "$@"; do
        if [[ -f ${CH_TEST_TARDIR}/${f} ]]; then
            return 0
        else
            missing+=("${CH_TEST_TARDIR}/${f}")
        fi
    done
    fatal "phase: $phase: missing build phase artifact(s): ${missing[*]}"
}

fatal () {
    printf 'error: %s\n\n' "$1" 1>&2
    exit 1
}

# Create test directories for TAR and IMG. This is to avoid cryptic bats error
# (#347) that occurs when setting a CH_TEST_IMGDIR or CH_TEST_TARDIR variables
# to a path where there are two or more subdirectories that do not exist.
mk_dirs () {
if [[ ! -d $CH_TEST_TARDIR ]]; then
    echo "creating $CH_TEST_TARDIR"
    mkdir -p "$CH_TEST_TARDIR"
fi
if [[ ! -d $CH_TEST_IMGDIR ]]; then
    echo "creating $CH_TEST_IMGDIR"
    mkdir -p "$CH_TEST_IMGDIR"
fi
}

# Remove CH_TEST_PERMDIRS directories. Ensure that the target directory has
# only two sub directories, e.g., nopass and pass.
rm_ () {
    if [[ $(find "${d}" -maxdepth 1 -mindepth 1 | wc -l) == 2 ]] && \
       (find "${d}" -maxdepth 1 -mindepth 1 -name pass -type d) && \
       (find "${d}" -maxdepth 1 -mindepth 1 -name nopass -type d); then
        echo "removing ${d}"
        sudo rm -rf --one-file-system "$d"
    fi
}

single_assignment () {
    if [[ -n $1 ]]; then
        fatal "phase: assignment more than once (originally set to: $phase)"
    fi
}

set_builder () {
    if [[ -n $builder ]]; then
        export CH_BUILDER=$builder
        method='command line'
    elif [[ -n $CH_BUILDER ]]; then
        method='environment variable'
    else
        builder_choose
        method='default'
    fi
    printf 'setting builder to %s (%s)\n' "$CH_BUILDER" "$method"
    if [[ $CH_BUILDER == 'ch-grow' ]]; then
        set_chvar CH_GROW_STORAGE 'ch-grow storage' '' "$CH_GROW_STORAGE" /var/tmp/ch-grow_
    fi
}

top_dir=$(readlink -f "${ch_bin%/*}")

# Ensure ch-run has been compiled (issue #329).
if (! "${ch_bin}/ch-run" --version &> /dev/null); then
    fatal "ch-run not found; expected in $ch_bin."
fi

# Ensure namespaces are configured properly.
if (! "${ch_bin}/ch-checkns" &> /dev/null); then
    fatal 'namespace sanity check (ch-checkns) failed.'
fi

# Ensure we have bash 4.1 or higher
if (bash -c 'set -e; [[ 1 = 0 ]]; exit 0'); then
    # Bash bug: [[ ... ]] expression doesn't exit with set -e
    # https://github.com/sstephenson/bats/issues/49
    fatal 'dependency: bash: need at least Bash 4.1 for these tests.'
fi

# Ensure BATS_TMPDIR is set to /tmp (issue #278).
if [[ -n $BATS_TMPDIR ]]; then
    if [[ ! $BATS_TMPDIR == '/tmp/'* ]]; then
        fatal "env: BATS_TMPDIR: not set to /tmp (issue #278)."
    fi
fi

# Determine source vs prefix installation.
if [[ -d "${top_dir}/test" ]]; then
    # source install
    testdir=${top_dir}/test
else
    # prefix installation
    testdir=${top_dir%/charliecloud}/libexec/charliecloud-$(version 2>&1)/test
fi

# Check for test directory.
if (! cd "$testdir"); then
    fatal "test directory not found; expected in $top_dir"
fi

cd "$testdir" || fatal "cd $testdir failed"

# Ensure bats is installed.
if (command -v bats &> /dev/null); then
    bats=$(command -v bats)
    bv=$(bats --version)
elif [[ -x "${test_dir}/bats/bin/bats" ]]; then
    bats=$(readlink -f "${test_dir}/bats/bin/bats")
    bv=$($bats --version)
else
    fatal 'dependency: bats is not installed.'
fi

# Parse arguments.
while [[ $# -gt 0 ]]; do
    opt=$1; shift
    case $opt in
    build|clean|examples|mk-perm-dirs|rm-perm-dirs|run)
        single_assignment "$phase"
        phase=$opt
        ;;
    -b|--builder)
        single_assignment "$builder"
        builder=$1; shift
        ;;
    --dry-run)
        dry=true
        ;;
    -h|--help)
        usage 0
        ;;
    --img-dir)
        single_assignment "$imgdir"
        imgdir=$1; shift
        ;;
    --perm-dir)
        permdirs+=("$1"); shift
        ;;
    -s|--scope)
        single_assignment "$scope"
        check_scope "$1"
        scope=$1; shift
        ;;
    --sudo)
        use_sudo=yes
        ;;
    --tar-dir)
        single_assignment "$tardir"
        tardir=$1; shift
        ;;
    --version)
        version; exit 0
        ;;
    *)
        fatal "unrecognized argument: $opt"
        ;;
    esac
done

if [[ -z $phase ]]; then
    phase=all
    printf "executing test phases: build, run, and examples\n"
fi

printf 'using ch-run %s at %s\n' "$(version 2>&1)" "${ch_bin}/ch-run"
printf 'using bats %s at %s\n' "$(echo "$bv" | awk '{print $2}')" "$bats"
printf 'using test directory %s\n' "$testdir"

#           variable name     description           command line        environment         default
set_chvar   CH_TEST_SCOPE     'test scope'          "$scope"            "$CH_TEST_SCOPE"    standard
set_chvar   CH_TEST_SUDO      'sudo capabilities'   "$use_sudo"         "$CH_TEST_SUDO"     no
set_chvar   CH_TEST_IMGDIR    'image directory'     "$imgdir"           "$CH_TEST_IMGDIR"   /var/tmp/img
set_chvar   CH_TEST_TARDIR    'tarball directory'   "$tardir"           "$CH_TEST_TARDIR"   /var/tmp/tar
set_chvar   CH_TEST_PERMDIRS  'permission fixtures' "${permdirs[*]}"    "$CH_TEST_PERMDIRS" skip
set_builder

if   [[ $phase == 'mk-perm-dirs' ]] && [[ -z $use_sudo ]]; then
    fatal "phase: $phase: requires --sudo"
elif [[ $phase == *'perm'* ]] && [[ ${CH_TEST_PERMDIRS[*]} == skip ]]; then
    fatal "phase: $phase: CH_TEST_PERMDIRS: can't be 'skip'"
fi

case $phase in
    all)
        ;&
    build)
        check_builder
        ;;
    run)
        check_tardir
        ;;
esac

if [[ -n $dry ]];then
    printf "exiting; dry-run complete"
    exit 0
fi

# Execute phase
case $phase in
    build)
        mk_dirs
        make test-build
        ;;
    run)
        make test-run
        ;;
    examples)
        make test-test
        ;;
    all)
        mk_dirs
        make test
        ;;
    mk-perm-dirs)
        printf '\ngenerating file permission enforcement test fixtures:\n'
        for d in $CH_TEST_PERMDIRS; do
            if [[ -d ${d} ]]; then
                printf '%s already exists\n' "$d"
                continue
            else
                sudo "${testdir}/make-perms-test" "$d" "$USER" nobody
            fi
        done
        echo
        ;;
    rm-perm-dirs)
        for d in $CH_TEST_PERMDIRS; do
            rm_ "$d"
        done
        ;;
    clean)
        echo "removing $CH_TEST_TARDIR"
        rm -rf --one-file-system "$CH_TEST_TARDIR"
        echo "removing $CH_TEST_IMGDIR"
        rm -rf --one-file-system "$CH_TEST_IMGDIR"
        ;;
esac
