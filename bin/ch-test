#!/bin/bash

set -e
export LC_ALL=C  # predictable sorting

fatal () {
    printf 'error: %s\n' "$1" 1>&2
    exit 1
}

warning () {
    printf 'warning: %s\n' "$1" 1>&2
}

libexec=$(cd "$(dirname "$0")" && pwd)/../libexec/charliecloud
if [[ ! -f ${libexec}/base.sh ]]; then
    fatal "install or build problem: not found: ${libexec}/base.sh"
fi
. "${libexec}/base.sh"
. "${libexec}/contributors.bash"

export ch_bin

# shellcheck disable=SC2034
usage=$(cat <<EOF
Run some or all of the Charliecloud test suite.

Usage:

  $ $(basename "$0") [PHASE] [--scope SCOPE] [OPTIONS]

Valid phases: build, run, examples, mk-perm-dirs, clean, rm-perm-dirs
Valid scopes: quick, standard, full

Additional options:

  -b, --builder BUILDER  image builder to use
  --dry-run              print summary of what would be tested and exit
  -h, --help             print this help and exit
  --img-dir DIR          unpacked images directory; same as \$CH_TEST_IMGDIR
  --pack-dir DIR         packed imaged directory; same as \$CH_TEST_TARDIR
  --perm-dir DIR         permissions fixture dir, can repeat; \$CH_TEST_PERMDIRS
  --sudo                 enable tests that need sudo
  --version              print version and exit

See the man page for important details.
EOF
)

builder_check () {
    printf 'checking builder ...\n'
    case $CH_BUILDER in
    ch-grow)
        if ! ("${ch_bin}/ch-grow" --dependencies); then
            fatal 'builder: ch-grow: missing dependencies'
        fi
        bl=$(readlink -f "${ch_bin}/ch-grow")
        bv=$("$bl" --version)
        ;;
    buildah)
        ;&
    buildah-runc)
        ;&
    buildah-setuid)
        if (! command -v buildah &> /dev/null); then
            fatal 'builder: buildah: not installed.'
        fi
        bl=$(command -v buildah)
        bv=$(buildah --version | awk '{print $3}')
        min='1.11.2'
        ;;
    docker)
        if (! command -v docker &> /dev/null); then
            fatal 'builder: docker: not installed'
        fi
        bl=$(command -v docker)
        bv=$(docker_ --version | awk '{print $3}' | sed -e 's/,$//')
        ;;
    none)
        bl='none'
        bv=
        ;;
    *)
        fatal "builder: $CH_BUILDER: not supported"
        ;;
    esac
    printf 'found: %s %s\n\n' "$bl" "$bv"
    version_check 'builder' "$min" "$bv"
}

builder_set () {
    width=$1
    if [[ -n $builder ]]; then
        export CH_BUILDER=$builder
        method='command line'
    elif [[ -n $CH_BUILDER ]]; then
        method='environment'
    else
        builder_choose
        method='default'
    fi
    # shellcheck disable=SC2059
    printf "%-${width}s %s (%s)\n" 'builder:' "$CH_BUILDER" "$method"
    if [[ $CH_BUILDER == ch-grow ]]; then
        vset CH_GROW_STORAGE '' "$CH_GROW_STORAGE" /var/tmp/ch-grow \
                             "$width" 'ch-grow storage'
    fi
}

# Create CH_TEST_IMGDIR, avoiding #347.
dir_img_mk () {
    dir_img_rm
    printf "creating %s\n\n" "$CH_TEST_IMGDIR"
    mkdir "$CH_TEST_IMGDIR"
}

dir_img_rm () {
    echo "removing $CH_TEST_IMGDIR"
    rm -rf --one-file-system "$CH_TEST_IMGDIR"
}

# Remove a filesystem permissions fixture directory. Ensure that the target
# directory has exactly the two subdirectories expected first.
dir_perm_rm () {
    if [[    $(find "${1}" -maxdepth 1 -mindepth 1 | wc -l) == 2 \
          && -d "${1}/pass" && -d "${1}/nopass" ]]; then
        echo "removing ${1}"
        sudo rm -rf --one-file-system "$1"
    fi
}

# The run phase requires artifacts from a successful build phase. Thus, we
# check sanity based on the minimal set of artifacts (no builder).
dir_tar_check () {
    printf 'checking %s: ' "$CH_TEST_TARDIR"
    dir_tar_check_file chtest{.tar.gz,.sqfs}
    printf 'ok\n\n'
}

dir_tar_check_file () {
    local missing
    for f in "$@"; do
        if [[ -f ${CH_TEST_TARDIR}/${f} ]]; then
            return 0
        else
            missing+=("${CH_TEST_TARDIR}/${f}")
        fi
    done
    fatal "phase $phase: missing packed images: ${missing[*]}"
}

dir_tar_mk () {
    dir_tar_rm
    printf "creating %s\n\n" "$CH_TEST_TARDIR"
    mkdir "$CH_TEST_TARDIR"
}

dir_tar_rm () {
    echo "removing $CH_TEST_TARDIR"
    rm -rf --one-file-system "$CH_TEST_TARDIR"
}

dirs_unpriv_rm () {
    dir_tar_rm
    dir_img_rm
}

pq_missing () {
    if [[ $phase == all || $phase == build ]]; then
        local img=$1
        local out=$2
        local tag
        tag=$("$make_auto" tag "$img")
        printf '%s\n' "$out" >> "${CH_TEST_TARDIR}/${tag}.pq_missing"
    fi
}

pedantry_set () {
    width=$1
    default=no
    # Default to pedantic on CI or if user is a contributor.
    if [[ -n $ch_contributor || -n $TRAVIS ]]; then
        default=yes
    fi
    vset ch_pedantic "$pedantic" '' $default "$width" 'pedantic mode'
    if [[ $ch_pedantic == no ]]; then
        ch_pedantic=  # proper boolean
    fi
    # The motivation here is that in pedantic mode, we want to run all the
    # tests we reasonably can. So, if the user *has* sudo, then default --sudo
    # to yes. What is a little awkward is that "sudo -v" can generate a
    # password prompt in the middle of the status output. An alternative is
    # "sudo -nv", which doesn't; drawbacks are that you have to analyze the
    # output (not exit code) and it generates a failed password log message if
    # there is not already a sudo session going.
    if    [[ -n $ch_pedantic ]] \
       && (command -v sudo > /dev/null) \
       && (sudo -v > /dev/null 2>&1); then
        use_sudo_default=yes
    else
        use_sudo_default=
    fi
}

require_unset () {
    name=$1
    value=${!1}
    if [[ -n $value ]]; then
        fatal "$name: no multiple assignment (already \"$value\")"
    fi
}

scope_check () {
    case $1 in
    quick|standard|full)
        return 0
        ;;
    *)
        fatal "invalid scope: $1"
        ;;
    esac
}

# Assign scope a sortable opaque integer value. This value is used to help
# filter images and tests that are out of scope.
scope_to_digit () {
    case $1 in
        quick)
            echo 1
            ;;
        standard)
            echo 2
            ;;
        full)
            echo 3
            ;;
        skip*)
            # skip has the highest value to ensure it is always filtered out
            echo 4
            ;;
        *)
            fatal "scope '$scope' invalid"
    esac
}

test_build () {
    echo 'executing build phase tests ...'
    # FIXME: check for sotests?
    if [[ ! -f ${tmp_}/build_auto.bats ]]; then
        fatal "${tmp_}/build_auto.bats not found"
    fi
    bats build.bats "${tmp_}/build_auto.bats" build_post.bats
}

test_examples () {
    local tag
    local phase=examples
    if [[ $CH_TEST_SCOPE == quick ]]; then
        return
    fi
    echo
    echo 'executing example phase tests ...'
    for i in $examples; do
        if (test_make_check_image "$i"); then
            tag=$("$make_auto" tag "$i")
            export CH_TEST_TAG=$tag
            bats "$(dirname "$i")/test.bats"
        fi
    done
}

test_run () {
    echo
    echo 'executing run phase tests ...'
    if [[ ! -f ${tmp_}/run_auto.bats ]]; then
        fatal "${tmp_}/run_auto.bats not found"
    fi
    bats run_first.bats "${tmp_}/run_auto.bats" ./run/*.bats
    set -e
    if [[ $CH_TEST_SCOPE != quick ]]; then
        for guest_user in $(id -un) root nobody; do
            for guest_group in $(id -gn) root $(id -gn nobody); do
                export GUEST_USER=$guest_user
                export GUEST_GROUP=$guest_group
                echo "testing as $GUEST_USER $GUEST_GROUP"
                bats run/ch-run_uidgid.bats
            done
        done
    fi
    set +e
}

test_make_auto () {
    local img

    printf "finding images compatible with test settings ...\n"
    for i in $images $examples; do
        if (test_make_check_image "$i"); then
            echo "found: $i"
            targets+=( "$i" )
        fi
    done

    printf '\n'
    case $phase in
    build)
        printf 'generate build_auto.bats ...\n'
        "$make_auto" build "${targets[@]}" > "${tmp_}/build_auto.bats"
        printf 'ok\n\n'
        ;;
    run)
        printf 'generate run_auto.bats ...\n'
        "$make_auto" run "${targets[@]}" > "${tmp_}/run_auto.bats"
        printf 'ok\n\n'
        ;;
    all)
        printf 'generate build_auto.bats run_auto.bats ...\n'
        "$make_auto" build "${targets[@]}" > "${tmp_}/build_auto.bats"
        "$make_auto" run "${targets[@]}" > "${tmp_}/run_auto.bats"
        printf 'ok\n\n'
        ;;
    *)
        ;;
    esac
}

test_make_check_image () {
    img_ok=yes
    img=$1
    dir=$(basename "$(dirname "$img")")

    arch_exclude=$(cat "$img" | grep -F 'ch-test-arch-exclude: ' \
                              | sed 's/.*: //' | awk '{print $1}')

    builder_include=$(cat "$img" | grep -F 'ch-test-builder-include: ' \
                                 | sed 's/.*: //' | awk '{print $1}')

    builder_exclude=$(cat "$img" | grep -F 'ch-test-builder-exclude: ' \
                                 | sed 's/.*: //' | awk '{print $1}')

    img_scope_int=$(scope_to_digit "$(cat "$img" | grep -F 'ch-test-scope' \
                                                 | sed 's/.*: //' \
                                                 | awk '{print $1}')")

    sudo_required=$(cat "$img" | grep -F 'ch-test-need-sudo')

    # Exclude Dockerfiles if we have no builder.
    if [[ $CH_BUILDER == none && $img == *Dockerfile* ]]; then
        pq_missing "$img" 'builder required'
        img_ok=
    fi

    # Exclude images with a scope that is not a subset of CH_TEST_SCOPE.
    if [[ $scope_int -lt "$img_scope_int" ]]; then
        pq_missing "$img" "not in scope: ${CH_TEST_SCOPE}"
        img_ok=
    fi
    # Exclude images that do not work with the host architecture.
    for a in $arch_exclude; do
        if [[ $a == "$(uname -m)" ]]; then
            pq_missing "$img" "incompatible architecture: ${a}"
            img_ok=
        fi
    done

    # Exclude image if included builders are given and $CH_BUILDER isn't one.
    if [[ -n $builder_include ]]; then
        builder_ok=
        for b in $builder_include; do
            if [[ $b == "$CH_BUILDER" ]]; then
                builder_ok=yes
            fi
        done
        if [[ -z $builder_ok ]]; then
            pq_missing "$img" "builder not included: ${CH_BUILDER}"
            img_ok=
        fi
    fi

    # Exclude images that are not compatible with CH_BUILDER.
    for b in $builder_exclude; do
        if [[ $b == "$CH_BUILDER" ]]; then
            pq_missing "$img" "builder excluded: ${CH_BUILDER}"
            img_ok=
        fi
    done

    # Exclude images that require sudo if CH_TEST_SUDO is empty
    if [[ -n $sudo_required && -z $CH_TEST_SUDO ]]; then
        pq_missing "$img" 'generic sudo required'
        img_ok=
    fi

    # In examples phase, exclude chtest (special case) and any images not in a
    # subdirectory of examples.
    if [[ $phase == examples && ( $dir == chtest || $dir == examples ) ]]; then
        img_ok=
    fi

    if [[ -n $img_ok ]]; then
        return 0  # include image
    else
        return 1  # exclude image
    fi
}

# Exit with failure if given version number is below a minimum.
#
# $1: human-readable descriptor
# $2: minimum version
# $3: actual version
version_check () {
    desc=$1
    min=$2
    actual=$3
    if [[ $(  printf '%s\n%s\n' "$min" "$actual" \
            | sort -V | head -n1) != "$min" ]]; then
        fatal "$desc: mininum version $min, found $actual"
    fi
}

win () {
    printf "\nAll tests passed.\n"
}

# Ensure ch-run has been compiled (issue #329).
if (! "${ch_bin}/ch-run" --version &> /dev/null); then
    fatal "no working ch-run found in $ch_bin"
fi

# Ensure we have Bash 4.1 or higher
if (bash -c 'set -e; [[ 1 = 0 ]]; exit 0'); then
    # Bash bug: [[ ... ]] expression doesn't exit with set -e
    # https://github.com/sstephenson/bats/issues/49
    fatal 'Bash minimum version is 4.1'
fi

# Create a directory to hold auto-generated test artifacts.
tmp_=/tmp/ch-test.tmp.$USER
if [[ ! -d $tmp_ ]]; then
    mkdir "$tmp_"
    chmod 700 "$tmp_"
fi

# Find test directories. (At one point we tried to unify the paths between the
# two conditions using a deeper directory hierarchy and symlinks to . in the
# source code to keep it from being even deeper, but this became too unruly.)
if [[ -d ${ch_base}/share ]]; then
    # installed
    CHTEST_INSTALLED=yes
    CHTEST_GITWD=
    CHTEST_DIR=${ch_base}/libexec/charliecloud/test
    CHTEST_EXAMPLES_DIR=${ch_base}/share/doc/charliecloud/examples
else
    # build dir
    CHTEST_INSTALLED=
    if [[ -d ${ch_base}/.git ]]; then
        CHTEST_GITWD=yes
    else
        CHTEST_GITWD=
    fi
    CHTEST_DIR=${ch_base}/test
    CHTEST_EXAMPLES_DIR=${ch_base}/examples
fi
export ch_base
export CHTEST_INSTALLED
export CHTEST_GITWD
export CHTEST_DIR
export CHTEST_EXAMPLES_DIR
make_auto="${CHTEST_DIR}/chtest-make-auto"

# Check for test directory.
if [[ ! -d $CHTEST_DIR ]]; then
    fatal "test directory not found: $CHTEST_DIR"
fi
if [[ ! -d $CHTEST_EXAMPLES_DIR ]]; then
    fatal "examples not found: $CHTEST_EXAMPLES_DIR"
fi

# Is the user a contributor?
email=
# First, ask Git for the configured e-mail address.
if ( command -v git > /dev/null 2>&1 ); then
    email="$(git config --get user.email)"
fi
# If that doesn't work, construct it from the environment.
if [[ -z $email ]]; then
    email="$USER@$(hostname --domain)"
fi
ch_contributor=
for i in "${ch_contributors[@]}"; do
    if [[ $i == "$email" ]]; then
        ch_contributor=yes
    fi
done

# Ensure Bats is installed.
if (command -v bats &> /dev/null); then
    bats=$(command -v bats)
    bats_version="$(bats --version | awk '{print $2}')"
else
    fatal 'Bats not found'
fi

# Parse arguments.
while [[ $# -gt 0 ]]; do
    opt=$1; shift
    case $opt in
    build|clean|examples|mk-perm-dirs|rm-perm-dirs|run)
        require_unset phase
        phase=$opt
        ;;
    -b|--builder)
        require_unset builder
        builder=$1; shift
        ;;
    --builder=*)
        require_unset builder
        builder=${opt#*=}
        ;;
    --dry-run)
        dry=true
        ;;
    -h|--help)
        usage 0
        ;;
    --img-dir)
        require_unset imgdir
        imgdir=$1; shift
        ;;
    --img-dir=*)
        require_unset imgdir
        imgdir=${opt#*=}
        ;;
    --pack-dir)
        require_unset tardir
        tardir=$1; shift
        ;;
    --pack-dir=*)
        require_unset tardir
        tardir=${opt#*=}
        ;;
    --pedantic)
        pedantic=$1; shift
        ;;
    --pedantic=*)
        pedantic=${opt#*=}
        ;;
    --perm-dir)
        use_sudo=yes
        permdirs+=("$1"); shift
        ;;
    --perm-dir=*)
        use_sudo=yes
        permdirs+=("${opt#*=}")
        ;;
    -s|--scope)
        require_unset scope
        scope_check "$1"
        scope=$1; shift
        ;;
    --scope=*)
        require_unset scope
        arg=${opt#*=}
        scope_check "$arg"
        scope=$arg
        ;;
    --sudo)
        use_sudo=yes
        ;;
    --version)
        version; exit 0
        ;;
    *)
        fatal "unrecognized argument: $opt"
        ;;
    esac
done

printf 'ch-run:       %s\n' "${ch_bin}/ch-run"
printf 'bats:         %s (%s)\n' "$bats" "$bats_version"
printf 'tests:        %s\n' "$CHTEST_DIR"
printf 'installed:    %s\n' "${CHTEST_INSTALLED:-no}"
printf 'git workdir:  %s\n' "${CHTEST_GITWD:-no}"
if [[ -n $ch_contributor ]]; then
    ch_contributor_note="yes; $email in README.rst"
else
    ch_contributor_note="no; $email not in README.rst"
fi
printf 'contributor:  %s\n\n' "$ch_contributor_note"

printf "%-21s %s" 'phase:' "$phase"
if [[ -z $phase ]]; then
    phase=all
    printf 'build run examples'
fi
printf '\n'

#    variable name    CLI              environment         default
#                     desc. width  description
vset CH_TEST_SCOPE    "$scope"         "$CH_TEST_SCOPE"    standard \
                      21 'scope'
builder_set 21
pedantry_set 21
vset CH_TEST_SUDO     "$use_sudo"      "$CH_TEST_SUDO"     "$use_sudo_default" \
                      21 'use generic sudo'
vset CH_TEST_IMGDIR   "$imgdir"        "$CH_TEST_IMGDIR"   /var/tmp/img \
                      21 'unpacked images dir'
vset CH_TEST_TARDIR   "$tardir"        "$CH_TEST_TARDIR"   /var/tmp/tar \
                      21 'packed images dir'
vset CH_TEST_PERMDIRS "${permdirs[*]}" "$CH_TEST_PERMDIRS" skip \
                      21 'fs permissions dirs'
printf '\n'

if [[ $phase == *'perm'* ]] && [[ $CH_TEST_PERMDIRS == skip ]]; then
    fatal "phase $phase: CH_TEST_PERMDIRS: can't be 'skip'"
fi

# Check that different sources of version number are consistent.
printf 'ch-test version: %s\n' "$ch_version"
ch_run_version=$("${ch_bin}/ch-run" --version 2>&1)
if [[ $ch_version != "$ch_run_version" ]]; then
    warning "inconsistent ch-run version: ${ch_run_version}"
fi
if [[ -z $CHTEST_INSTALLED ]]; then
    cf_version=$("${ch_base}/configure" --version | head -1 | cut -d' ' -f3)
    if [[ $ch_version != "$cf_version" ]]; then
        warning "inconsistent configure version: ${cf_version}"
    fi
    src_version=$("${ch_base}/misc/version")
    if [[ $ch_version != "$src_version" ]]; then
        warning "inconsistent source version: ${src_version}"
    fi
fi
printf '\n'

# Ensure BATS_TMPDIR is set to /tmp (issue #278).
if [[ -n $BATS_TMPDIR && $BATS_TMPDIR != '/tmp' ]]; then
    fatal "BATS_TMPDIR: must be /tmp; found '$BATS_TMPDIR' (issue #278)"
fi

# User-private temporary directory in case multiple users are running the
# tests simultaneously.
btnew=$tmp_/bats.tmp
mkdir -p "$btnew"
chmod 700 "$btnew"
export BATS_TMPDIR=$btnew
[[ $(stat -c %a "$BATS_TMPDIR") = '700' ]]

# Ensure namespaces are configured properly.
printf 'checking namespaces ...\n'
if (! "${ch_bin}/ch-checkns"); then
    fatal 'namespace sanity check (ch-checkns) failed'
fi
printf '\n'

if [[ $CH_TEST_SUDO ]]; then
    printf 'checking sudo ...\n'
    sudo echo ok
    printf '\n'
fi

case $phase in
    all)
        ;&
    build)
        builder_check
        ;;
    examples|run)
        dir_tar_check
        ;;
esac

if [[ -n $dry ]];then
    printf 'exiting per --dry-run\n'
    exit 0
fi


cd "$CHTEST_DIR"

export PATH=$ch_bin:$PATH

# The distinction here is that "images" are purely for testing and have no
# value as examples for the user, while "examples" are dual-purpose.
images=$(find   "$CHTEST_DIR"             -name 'Build' \
                                       -o -name 'Build.*' \
                                       -o -name 'Dockerfile.*' | sort)
examples=$(find "$CHTEST_EXAMPLES_DIR"    -name 'Build' \
                                       -o -name 'Build.*' \
                                       -o -name 'Dockerfile' \
                                       -o -name 'Dockerfile.*' | sort)

scope_int=$(scope_to_digit "$CH_TEST_SCOPE")

# Execute phase
case $phase in
    build)
        dir_tar_mk
        test_make_auto
        test_build
        win
        ;;
    run)
        dir_img_mk
        test_make_auto
        test_run
        win
        ;;
    examples)
        test_examples
        win
        ;;
    all)
        dir_tar_mk
        dir_img_mk
        test_make_auto
        test_build
        test_run
        test_examples
        win
        ;;
    mk-perm-dirs)
        printf 'creating filesystem permissions fixtures ...\n'
        for d in $CH_TEST_PERMDIRS; do
            if [[ -d ${d} ]]; then
                printf '%s already exists\n' "$d"
                continue
            else
                sudo "${CHTEST_DIR}/make-perms-test" "$d" "$USER" nobody
            fi
        done
        echo
        ;;
    rm-perm-dirs)
        for d in $CH_TEST_PERMDIRS; do
            dir_perm_rm "$d"
        done
        ;;
    clean)
        dirs_unpriv_rm
        if [[ -d $tmp_ ]] && [[ -e $tmp_/build_auto.bats ]]; then
            echo "removing $tmp_"
            rm -rf --one-file-system "$tmp_"
        fi
        ;;
esac
