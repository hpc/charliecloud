#!%PYTHON_SHEBANG%

import argparse
import inspect
import os.path
import sys

sys.path.insert(0, (  os.path.dirname(os.path.abspath(__file__))
                    + "/../lib/charliecloud"))
import charliecloud as ch
import build
import misc


## Constants ##

CH_BIN = os.path.dirname(os.path.abspath(
           inspect.getframeinfo(inspect.currentframe()).filename))
CH_RUN = CH_BIN + "/ch-run"


## Main ##

def main():

   # FIXME: ch-run is only actually needed for "build".
   if (not os.path.exists(CH_RUN)):
      ch.depfails.append(("missing", CH_RUN))

   # https://stackoverflow.com/a/5464440
   #HF = lambda prog: argparse.HelpFormatter(prog, max_help_position=26)

   ap = argparse.ArgumentParser(formatter_class=ch.HelpFormatter,
      description="FIXME",
      epilog="""Storage directory is used for caching and temporary images.
                Location: first defined of --storage, $CH_GROW_STORAGE, and
                %s.""" % ch.storage_default())
   ap._optionals.title = "options"  # https://stackoverflow.com/a/16981688
   sps = ap.add_subparsers(title="subcommands", metavar="CMD")

   # Common options.
   #
   # --dependencies (and --help and --version) are options rather than
   # subcommands for consistency with other commands.
   ap.add_argument("--dependencies", action=misc.Dependencies,
                   help="print any missing dependencies and exit")
   ap.add_argument("--no-cache", action="store_true",
                   help="download everything needed, ignoring the cache")
   ap.add_argument("-s", "--storage", metavar="DIR", default=ch.storage_env(),
                   help="set builder internal storage directory to DIR")
   ap.add_argument("-v", "--verbose", action="count", default=0,
                   help="print extra chatter (can be repeated)")
   ap.add_argument("--version", action=misc.Version,
                   help="print version and exit")

   # build
   help="build image from Dockerfile"
   sp = sps.add_parser("build", help=help, description=help,
                       formatter_class=ch.HelpFormatter)
   sp.set_defaults(func=build.main)
   sp.add_argument("--build-arg", action="append", default=None,
                   metavar="ARG[=VAL]",
                   help="set build-time variable ARG to VAL, or $ARG if no VAL")
   sp.add_argument("-f", "--file", metavar="DOCKERFILE",
                   help="Dockerfile to use (default: CONTEXT/Dockerfile)")
   sp.add_argument("-n", "--dry-run", action="store_true",
                   help="don't execute instructions")
   sp.add_argument("--parse-only", action="store_true",
                   help="stop after parsing the Dockerfile")
   sp.add_argument("-t", "--tag", metavar="TAG",
                   help="name of image to create (default: inferred)")
   sp.add_argument("context", metavar="CONTEXT",
                   help="context directory")

   # list
   help="list images in storage"
   sp = sps.add_parser("list", help=help, description=help)
   sp.set_defaults(func=misc.list_)

   # storage-path
   help="print storage directory path"
   sp = sps.add_parser("storage-path", help=help, description=help)
   sp.set_defaults(func=misc.storage_path)

   # Parse it up!
   if (len(sys.argv) < 2):
       ap.print_help(file=sys.stderr)
       sys.exit(1)
   cli = ap.parse_args()
   ch.log_setup(cli.verbose)

   # Dispatch.
   cli.func(cli)





## Bootstrap ##

if (__name__ == "__main__"):
   main()
