#!/bin/sh

LIBEXEC="$(cd "$(dirname "$0")" && pwd)"
. "${LIBEXEC}/base.sh"

# shellcheck disable=SC2034
usage=$(cat <<EOF
Inject files from the host into an image directory.

Usage:

  $ ch-fromhost [OPTION ...] (-c CMD | -f FILE | --nvidia ...) IMGDIR

Which files (one or more required; can be repeated):

  -c, --cmd CMD    listed in the stdout of CMD
  -f, --file FILE  listed in file FILE
      --nvidia     recommended by nVidia (via "nvidia-container-cli list")

Options:

  -d, --dest DST   files whose destination can't be inferred go in IMGDIR/DST
  -h, --help       print this help and exit
      --no-infer   don't infer destination for shared libraries and executables
  -v, --verbose    list the injected files
      --version    print version and exit
EOF
)

dest_default=
image=
infer=yes
newline='
'
found_files=
found_libs_p=
lib_dest=

debug () {
    if [ "$VERBOSE" ]; then
        printf '%s\n' "$1" 1>&2
    fi
}

ensure_nonempty () {
    [ "$2" ] || fatal "$1 must not be empty"
}

fatal () {
    printf 'ch-fromhost: %s\n' "$1" 1>&2
    exit 1
}

info () {
    printf 'ch-fromhost: %s\n' "$1" 1>&2
}

parse_basic_args "$@"

while [ $# -gt 0 ]; do
    opt=$1; shift
    out=
    case $opt in
        -c|--cmd)
            ensure_nonempty --cmd "$1"
            out=$($1) || fatal "command failed: $1"
            shift
            ;;
        -d|--dest)
            ensure_nonempty --dest "$1"
            dest_default=$1
            shift
            ;;
        -f|--file)
            ensure_nonempty --file "$1"
            out=$(cat "$1") || fatal "cannot read file: $1"
            shift
            ;;
        --no-infer)
            infer=
            ;;
        --nvidia)
               out=$(nvidia-container-cli list --binaries --libraries) \
            || fatal "nvidia-container-cli failed; does this host have GPUs?"
            ;;
        -v|--verbose)
            VERBOSE=yes
            ;;
        -*)
            info "invalid option: ${opt}"
            usage
            ;;
        *)
            ensure_nonempty "image path" "$opt"
            [ -z "$image" ] || fatal "duplicate image path: ${opt}"
            [ -d "$opt" ] || fatal "image not a directory: ${opt}"
            image=$opt
            ;;
    esac
    # This adds a delimiter newline only for the second and subsequent files.
    # See: https://chris-lamb.co.uk/posts/joining-strings-in-posix-shell
    found_files=${found_files:+${found_files}${newline}}${out}
done

debug "injecting into image: ${image}"

# First pass tests if we have any shared libraries in the list. If so, we need
# to figure out where to put them.
if [ $infer ]; then
    debug "checking for shared libraries"
    for f in $found_files; do
        case $f in
            */lib*)
                found_libs_p=yes
                break
                ;;
        esac
    done
    if [ $found_libs_p ]; then
        # We want to put the libraries in the first directory that ldconfig
        # searches, so that we can override (or overwrite) any of the same
        # library that may already be in the image.
        debug "asking ldconfig for shared library path"
        "${CH_BIN}/ch-run" -w "$image" -- /sbin/ldconfig  # cache maybe absent
        lib_dest=$(  "${CH_BIN}/ch-run" "$image" -- \
                                      /sbin/ldconfig -v 2> /dev/null \
                   | grep -E '^/' | cut -d: -f1 | head -1)
        [ -z "${lib_dest%%/*}" ] || fatal "bad path from ldconfig: ${lib_dest}"
        debug "shared library destination: ${lib_dest}"
    else
        debug "no shared libraries found"
    fi
fi

debug "injecting"
old_ifs=$IFS
IFS=$newline
found_file_p=
for f in $found_files; do
    found_file_p=yes
    type_=unk
    d=$dest_default
    if [ $infer ]; then
        case $f in
            */bin*)
                type_=bin
                d=/usr/bin
                ;;
            */lib*)
                type_=lib
                d=$lib_dest
                ;;
        esac
    fi
    debug "  ${type_}: ${f} -> ${d}"
    [ "$d" ] || fatal "no destination for: ${f}"
    [ -z "${d%%/*}" ] || fatal "not an absolute path: ${d}"
    [ -d "${image}${d}" ] || fatal "not a directory: ${image}${d}"
       cp --dereference --preserve=all "$f" "${image}/${d}" \
    || fatal "cannot inject: ${f}"
done
IFS=$old_ifs

[ -z $found_file_p ] && fatal "empty file list"

if [ $found_libs_p ] && [ $infer ]; then
    debug "found shared library, running ldconfig"
    "${CH_BIN}/ch-run" -w "$image" -- /sbin/ldconfig
else
    debug "no shared libraries found"
fi
