#!/bin/sh
#
# The basic algorithm here is that we build up a list of file
# source:destination pairs separated by newlines, then walk through them and
# copy them into the image. We also maintain a list of directories and ldconfig
# conf files to create, and a list of file globs to remove.
#
# The colon separator to avoid the difficulty of iterating through a sequence
# of pairs with no arrays or structures in POSIX sh. We could avoid it by
# taking action immediately upon encountering each file in the argument list,
# but that would (a) yield a half-injected image for basic errors like
# misspellings on the command line and (b) would require the image to be first
# on the command line, which seems awkward.
#
# The newline separator is for the same reason and also because it's
# convenient for input from --cmd and --file.
#
# Note on looping through the newlines in a variable: The approach in this
# script is to set IFS to newline, loop, then restore. This is awkward but
# seemed the least bad. Alternatives include:
#
#   1. Piping echo into "while read -r": This executes the while in a
#      subshell, so variables don't stick.
#
#   2. Here document used as input, e.g.:
#
#        while IFS= read -r FILE; do
#          ...
#        done <<EOF
#        $FILES
#        EOF
#
#      This works but seems more awkward.
#
#   3. Here string, e.g. 'while IFS= read -r FILE; do ... done <<< "$FILES"'.
#      This is a bashism.

lib=$(cd "$(dirname "$0")" && pwd)/../lib/charliecloud
. "${lib}/base.sh"

set -e

# shellcheck disable=SC2034
usage=$(cat <<EOF
Inject files from the host into an image directory, with various magic.

Usage:

  $ ch-fromhost [OPTION ...] [FILE_OPTION ...] IMGDIR

Which files to inject (one or more required; can be repeated):

  -c, --cmd  CMD   listed in the stdout of CMD
  -f, --file FILE  listed in file FILE
  -p, --path PATH  inject the file at PATH
  -o, --ofi  PATH  inject host compiled loadable OFI provider(s) at PATH

  --nvidia         recommended by nVidia (via \"nvidia-container-cli list\")

Destination within image:

  -d, --dest DST   place preceding files in IMGDIR/DST, overriding inference

Options:

  --ofi-path       print the inferred destination for loadable ofi providers
  --lib-path       print the inferred destination for shared libraries
  --no-ldconfig    don\'t run ldconfig even if we injected shared libraries
  -h, --help       print this help and exit
  -v, --verbose    list the injected files
  --version        print version and exit

NOTE: This command is experimental. Features may be incomplete and/or buggy.
EOF
)

dest=
image=
newline='
'
inject_files=      # source:destination files to inject
inject_mkdirs=     # directories to create in image (image-rooted)
inject_unlinks=    # files to rm -f (not rmdir or rm -Rf) (image-rooted)
lib_dest=
lib_dest_print=
lib_found=
no_ldconfig=

debug () {
    if [ "$verbose" = 'yes' ]; then
        printf '[ debug ] %s\n' "$1" 1>&2
    fi
}

debug_indent () {
    if [ "$verbose" = 'yes' ]; then
        printf '[ debug ]    %s\n' "$1" 1>&2
    fi
}
warn () {
    printf '< warn >! %s\n' "$1" 1>&2
}

ensure_nonempty () {
    [ "$2" ] || fatal "$1 must not be empty"
}

fatal () {
    printf 'error: ch-fromhost: %s\n' "$1" 1>&2
    exit 1
}

info () {
    printf 'ch-fromhost: %s\n' "$1" 1>&2
}

is_bin () {
    case $1 in
        */bin*|*/sbin*)
            return 0
            ;;
        *)
            return 1
    esac
}

is_ofi () {
    case $1 in
        *-fi.so)
            return 0
            ;;
        *)
            return 1
    esac
}

is_so () {
    case $1 in
        */lib*)
            return 0
            ;;
        *.so)
            return 0
            ;;
        *)
            return 1
    esac
}

queue_files () {
    old_ifs="$IFS"
    IFS="$newline"
    d="${dest:-$2}"
    for f in $1; do
        case $f in
            *:*)
                fatal "paths can't contain colon: ${f}"
                ;;
        esac
        if is_so "$f"; then
            debug "found shared library: ${f}"
            lib_found=yes
        fi
        # This adds a delimiter only for the second and subsequent files.
        # https://chris-lamb.co.uk/posts/joining-strings-in-posix-shell
        #
        # If destination empty, we'll infer it later.
        inject_files="${inject_files:+$inject_files$newline}$f:$d"
    done
    IFS="$old_ifs"
}

queue_ofi_dso () {
    old_ifs="$IFS"
    IFS="$newline"
    d="${dest:-$2}"
    # Directory of OFI provider dsos (*-fi.so's).
    if [ -d "$1" ]; then
       debug "searching $1 for ofi providers"
       for f in "${1}/"*-fi.so; do
           queue_ofi_dso "$f"
       done
       [ -n "$ofi_found" ] || "no ofi providers found in $1"
    # Single OFI dso provider.
    elif is_ofi "$1"; then
        debug_indent "found $1"
        inject_ofi="${inject_ofi:+$inject_ofi$newline}$1:$d"
        ofi_found=yes
        # process ofi dso link paths
        ldds=$(ldd "$1" 2>&1 | grep lib | awk '{print $3}' | sort -u)
        for l in $ldds; do
            ld=$(dirname "$(readlink -f "$l")")
            # avoid duplicates and host libfabric.so location
            if     [ "$(echo "$ld_conf" | grep -c "$ld")" -eq 0 ] \
                && [ "$(echo "$ld" | grep -c "libfabric.so")" -eq 0 ]; then
                queue_add_ldconf "$ld"
            fi
        done
    else
        fatal "$1 is not a directory or file ending '-fi.so'"
    fi
}

queue_add_ldconf () {
    [ "$1" ]
    ld_conf="${ld_conf:+$ld_conf$newline}$1"
}

queue_mkdir () {
    [ "$1" ]
    inject_mkdirs="${inject_mkdirs:+$inject_mkdirs$newline}$1"
}

queue_unlink () {
    [ "$1" ]
    inject_unlinks="${inject_unlinks:+$inject_unlinks$newline}$1"
}

parse_basic_args "$@"

while [ $# -gt 0 ]; do
    opt=$1; shift
    case $opt in
        -c|--cmd)
            ensure_nonempty --cmd "$1"
            out=$($1) || fatal "command failed: $1"
            queue_files "$out"
            shift
            ;;
        -d|--dest)
            ensure_nonempty --dest "$1"
            dest=$1
            shift
            ;;
        -f|--file)
            ensure_nonempty --file "$1"
            out=$(cat "$1") || fatal "cannot read file: ${1}"
            queue_files "$out"
            shift
            ;;
        --lib-path)
            # Note: If this is specified along with one of the file
            # specification options, all the file gathering and checking work
            # will happen, but it will be discarded.
            lib_found=yes
            lib_dest_print=yes
            ;;
        --no-ldconfig)
            no_ldconfig=yes
            ;;
        --nvidia)
               out=$(nvidia-container-cli list --binaries --libraries) \
            || fatal "nvidia-container-cli failed; does this host have GPUs?"
            queue_files "$out"
            ;;
        -o|--ofi)
            if [ -n "$FI_PROVIDER" ]; then
                warn "FI_PROVIDER is set; may cause undesired run time behavior"
            fi
            if [ -n "$FI_PROVIDER_PATH" ]; then
                warn "FI_PROVIDER_PATH is set; --dest required"
            fi
            ensure_nonempty --ofi "$1"
            queue_ofi_dso "$1"
            shift
            ;;
        --ofi-path)
            ofi_found=yes
            ofi_dest_print=yes
            ;;
        -p|--path)
            ensure_nonempty --path "$1"
            queue_files "$1"
            shift
            ;;
        -v|--verbose)
            verbose=yes
            ;;
        -*)
            info "invalid option: ${opt}"
            usage
            ;;
        *)
            ensure_nonempty "image path" "${opt}"
            [ -z "$image" ] || fatal "duplicate image: ${opt}"
            [ -d "$opt" ] || fatal "image not a directory: ${opt}"
            image="$opt"
            ;;
    esac
done

if [ -n "$FI_PROVIDER_PATH" ]; then
    if [ -n "$ofi_found" ] && [ -z "$dest" ]; then
        fatal "FI_PROVIDER_PATH set; missing --dest"
    fi
fi

[ "$image" ] || fatal "no image specified"

if [ $lib_found ]; then
    # We want to put the libraries in the first directory that ldconfig
    # searches, so that we can override (or overwrite) any of the same library
    # that may already be in the image.
    debug "asking ldconfig for shared library destination"
    # "ldconfig -Nv" gives some pointless warnings on stderr even if
    # successful; we don't want to show those to users. However, we don't want
    # to simply pipe stderr to /dev/null because this hides real errors. Thus,
    # use the following abomination to pipe stdout and stderr to *separate
    # grep commands*. See: https://stackoverflow.com/a/31151808
    lib_dest=$( { "${ch_bin}/ch-run" "$image" -- /sbin/ldconfig -Nv \
                  2>&1 1>&3 3>&- | grep -Ev '(^|dynamic linker, ignoring|given more than once)$' ; } \
                3>&1 1>&2 | grep -E '^/' | cut -d: -f1 | head -1 )
    [ -n "$lib_dest" ] || fatal 'empty path from ldconfig'
    [ -z "${lib_dest%%/*}" ] || fatal "bad path from ldconfig: ${lib_dest}"
    debug "shared library destination: ${image}/${lib_dest}"
fi

if [ $ofi_found ] && [ -z "$dest" ]; then
    # By default, libfabric will create and use loadable providers in the
    # in the $PREFIX/lib/libfabric directory, where PREFIX is the --prefix
    # argument (path) specified at libfabric configure.
    #
    # However, the target libfabric provider, and/or provider path, can also be
    # specified with:
    #
    #   - FI_PROVIDER, and
    #   - FI_PROVIDER_PATH (undocumented)
    #
    # respectively. This complicates things because these variables can be
    # inherited from the host or explicitly set in the image's /ch/environment
    # file. ch-run, by default, inherits and prefers all host variables to any
    # listed in /ch/environment.
    #
    # The injection destination is then determined as follows.
    #
    #   1. --dest DST if provided
    #   2. FI_PROVIDER_PATH from image /ch/environment file; warn about
    #      --set-env requirement
    #   3. the image's /libfabric directory at the path where libfabric.so
    #      is found; if the directory doesn't exist, create it.
    #
    # Note that if the host FI_PROVIDER_PATH is set, --dest is required.
    debug "searching ${image} for libfabric dso provider destination..."
    ch_env_p=$(grep -F FI_PROVIDER_PATH "${image}/ch/environment") \
             || true # avoid -e exit
    ch_env_p=${ch_env_p##*=}
    if  [ -n "$ch_env_p" ]; then
       warn "found FI_PROVIDER_PATH=$ch_env_p in ${image}/ch/environment"
       ofi_dest=$ch_env_p
       warn "using ${image}${ch_env_p}; --set-env required at run time"
    else
       ofi_so=$("${ch_bin}/ch-run" --no-home "$image" -- find / \
                                                -not \( -path /proc -prune \) \
                                                -not \( -path /dev -prune \) \
                                                -not \( -path /tmp -prune \) \
                                                -not \( -path /sys -prune \) \
                                                -not \( -path /var/opt/cray -prune \) \
                                                -not \( -path /etc/opt/cray -prune \) \
                                                -name  "libfabric.so")
       [ -n "$ofi_so" ] || fatal "libfabric.so not found in $image"
       debug_indent "found: ${image}${ofi_so}"
       ofi_dest=$(dirname "$ofi_so")
       ofi_dest="${ofi_dest}/libfabric"
       queue_mkdir "$ofi_dest"
    fi
    debug "ofi dso provider injection destination: $ofi_dest"
elif [ -n "$dest" ]; then
    ofi_dest=$dest
    debug "ofi dso provider injection destination: $ofi_dest"
fi

if [ $lib_dest_print ]; then
    echo "$lib_dest"
    exit 0
fi

if [ $ofi_dest_print ]; then
    echo "$ofi_dest"
    exit 0
fi

if [ -f /etc/opt/cray/release/cle-release ]; then
    # ALPS libraries require the contents of this directory to be present at
    # the same path as the host. Create the mount point here, then ch-run
    # bind-mounts it later.
    queue_mkdir /var/opt/cray/alps/spool

    # The cray-ugni provider will link against cray's libwlm_detect so. Create
    # the mount point for ch-run.
    queue_mkdir /opt/cray/wlm_detect

    # libwlm_detect.so requires file(s) to present at the same path as the host.
    # Create mount point for ch-run.
    queue_mkdir /etc/opt/cray/wlm_detect

    # Cray needs a pile of hugetlbfs filesystems mounted at
    # /var/lib/hugetlbfs/global. Create mount point for ch-run.
    queue_mkdir /var/lib/hugetlbfs

    # OFI uGNI provider, libgnix-fi.so, links against the Cray host's
    # libxpmem, libudreg, libalpsutil, libalpslli, and libugni; create mount
    # points for ch-run to use later.
    queue_mkdir /opt/cray/udreg
    queue_mkdir /opt/cray/xpmem
    queue_mkdir /opt/cray/ugni
    queue_mkdir /opt/cray/alps

    # Newer Cray Shasta environments require the contents of this directory
    # to be present at the same path as the host. Create mount points for
    # ch-run to use later.
    queue_mkdir /var/spool/slurmd
fi

[ "$inject_files" ] || [ "$inject_ofi" ] || fatal "empty file list"

debug "injecting into image: ${image}"

old_ifs="$IFS"
IFS="$newline"

# Process unlink list.
for u in $inject_unlinks; do
    debug_indent "rm -f ${image}${u}"
    rm -f "${image}${u}"
done

# Process bind-mount destination targets.
for d in $inject_mkdirs; do
    debug_indent "mkdir -p ${image}${d}"
    mkdir -p "${image}${d}"
done

# Process ldconfig targets.
if [ $ofi_found ]; then
    if [ ! -f "${image}/etc/ld.so.conf" ]; then
        debug_indent "touch ${image}/etc/ld.so.conf"
        touch "${image}/etc/ld.so.conf"
    fi
    if ! grep -F 'include ld.so.conf.d/*.conf' "${image}/etc/ld.so.conf" > /dev/null 2>&1; then
        debug_indent "echo 'include ld.so.conf.d/*.conf' >> ${image}/etc/ld.so.conf"
        echo 'include ld.so.conf.d/*.conf' >> "${image}/etc/ld.so.conf"
    fi
    # Prepare image ch-ofi.conf.
    printf '' > "${image}/etc/ld.so.conf.d/ch-ofi.conf"
    # add ofi dso provider ld library dirs.
    for c in $ld_conf; do
        debug_indent "echo '$c' >> ${image}/etc/ld.so.conf.d/ch-ofi.conf"
        echo "$c" >> "$ch_conf"
    done
fi

for file in $inject_files; do
    f="${file%%:*}"
    d="${file#*:}"
    infer=
    if is_bin "$f" && [ -z "$d" ]; then
        d=/usr/bin
        infer=" (inferred)"
    elif is_so "$f" && [ -z "$d" ]; then
        d=$lib_dest
        infer=" (inferred)"
    fi
    debug_indent "${f} -> ${d}${infer}"
    [ "$d" ] || fatal "no destination for: ${f}"
    [ -z "${d%%/*}" ] || fatal "not an absolute path: ${d}"
    [ -d "${image}${d}" ] || fatal "not a directory: ${image}${d}"
    if [ ! -w "${image}${d}" ]; then
        # Some images unpack with unwriteable directories; fix. This seems
        # like a bit of a kludge to me, so I'd like to remove this special
        # case in the future if possible. (#323)
        info "${image}${d} not writeable; fixing"
        chmod u+w "${image}${d}" || fatal "can't chmod u+w: ${image}${d}"
    fi
       cp --dereference --preserve=all "$f" "${image}${d}" \
    || fatal "cannot inject: ${f}"
done
for file in $inject_ofi; do
    f="${file%%:*}"
    d="${file#*:}"
    infer=
    if is_so "$f" && [ -z "$d" ]; then
        d=$ofi_dest
        infer=" (inferred)"
    fi
    debug_indent "${f} -> ${d}${infer}"
    [ "$d" ] || fatal "no destination for: ${f}"
    [ -z "${d%%/*}" ] || fatal "not an absolute path: ${d}"
    [ -d "${image}/${d}" ] || fatal "not a directory: ${image}/${d}"
    if [ ! -w "${image}${d}" ]; then
        # Some images unpack with unwriteable directories; fix. This seems
        # like a bit of a kludge to me, so I'd like to remove this special
        # case in the future if possible. (#323)
        info "${image}${d} not writeable; fixing"
        chmod u+w "${image}${d}" || fatal "can't chmod u+w: ${image}${d}"
    fi
       cp --dereference --preserve=all "$f" "${image}${d}/" \
    || fatal "cannot inject: ${f}"

done
IFS="$old_ifs"

if [ -z "$no_ldconfig" ] && { [ $lib_found ] || [ $ofi_found ] ;} then
    debug "running ldconfig"
    debug_indent "${ch_bin}/ch-run -w $image -- /sbin/ldconfig"
    "${ch_bin}/ch-run" -w "$image" -- /sbin/ldconfig
else
    debug "not running ldconfig"
fi
echo 'done'
