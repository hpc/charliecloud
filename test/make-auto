#!/usr/bin/env python

from __future__ import print_function

import os
import os.path
import re
import sys

def get_template(template_name):
   with open('make-auto.d/%s' % template_name, 'r') as fp:
      return fp.read().strip()

def tag_from_path(path):
   (dirname, basename) = os.path.split(path)
   parent_dir = os.path.basename(dirname)
   (basicname, extension) = os.path.splitext(basename)
   extension = extension[1:]  # remove leading dot, if any
   assert (basicname in ("Build", "Dockerfile", "Docker_Pull"))
   if (parent_dir in ("", ".", "test")):
      assert (extension != "")
      return extension
   else:
      if (extension == ""):
         return parent_dir
      else:
         return (parent_dir + "-" + extension)


mode = sys.argv[1]

if (mode == 'tag'):
   print(tag_from_path(sys.argv[2]))
   sys.exit(0)

print("""\
# Do not edit this file; it's autogenerated.

load common
""")

for path in sys.argv[2:]:

   (dirname, basename) = os.path.split(path)
   if (dirname == ""): dirname = "."
   tag = tag_from_path(path)

   # Interpret test hints.
   with open(path) as fp:
      text = fp.read()
      # ch-test-scope
      m = re.search(r"ch-test-scope: (skip|quick|standard|full)", text)
      if (m is None):
         print("%s: no valid scope specified" % path, file=sys.stderr)
         sys.exit(1)
      scope = m.group(1)
      # ch-test-arch-exclude
      arch_exclude = "\n".join("arch_exclude %s" % i for i in
                               re.findall(r"ch-test-arch-exclude: (\w+)", text))

   # Build an archive: different test for each type.
   if (mode == "build"):
      if ("Build" in basename):
         template = get_template('build_custom.bats.in')
      elif ("Dockerfile" in basename or "Docker_Pull" in basename):
         if ("Dockerfile" in basename):
            template = get_template('build_docker.bats.in')
         else:
            assert ("Docker_Pull" in basename)
            with open(path) as fp:
               addr = fp.readline().rstrip()
            template = get_template('pull_docker.bats.in')
         template += "\n\n" + get_template('docker_to_archive.bats.in')
      else:
         assert False, "unknown build type"
      print("\n" + template % locals())

   # Unpack archive and run: same for all types.
   if (mode == "run"):
      template = "\n\n".join(get_template(i + ".bats.in") for i in ("unpack", "run_image"))
      # template = ( get_template('unpack.bats.in') 
      #             + "\n\n"
      #             + get_template('run_image.bats.in'))
      print("\n" + template % locals())
