#!/bin/bash
# ch-test-scope: standard

# Build an Alpine Linux image using Buildah and umoci. This file may be
# removed if/when we can support Buildah instead of Docker for the full test
# suite (#184).
#
# See Build.skopeo-umoci for some caveats also relevant here.
#
# There are three basic approaches we considered:
#
#   1. "buildah export". The main problem here is that the subcommand does not
#      exist, though it used to [1,2]. A secondary issue is that it required
#      starting up a container [3], which we don't want.
#
#   2. "podman export". Podman (formerly kpod) is a container runtime [4]; it
#      can create a container and then export its filesystem. The addition of
#      the export command is why "buildah export" was removed [2]. We haven't
#      looked into this in detail. It appears to be Buildah's recommended
#      approach but would add a dependency.
#
#   3. Export to OCI image with "buildah push", flatten with umoci, and then
#      tar up the resulting rootfs. The advantage here is that it uses only
#      documented commands; the downside is that it introduces a redundant
#      unpack/repack of tarballs
#
#   4. Build with "buildah bud --squash", export to OCI image with "buildah
#      push", and manually copy out the tarball of the single layer. The main
#      advantage is that we can do it with Buildah only; the disadvantages are
#      (1) parsing JSON in shell is a kludge and (2) it only works with
#      single-layer images. The latter is easy to get with --squash, but if
#      you have a multi-layer image, that will require some fooling around
#      that I'm pretty sure is possible but haven't figured out yet.
#
# For now, this script uses approach 4.
#
# [1]: https://github.com/containers/buildah/pull/170
# [2]: https://github.com/containers/buildah/pull/245
# [3]: https://github.com/containers/buildah/issues/1118
# [4]: https://www.projectatomic.io/blog/2018/02/reintroduction-podman

set -e

srcdir=$1
tarball_gz=${2}.tar.gz
workdir=$3

tag=alpine39

cd "$srcdir"

if ( ! command -v buildah >/dev/null 2>&1 ); then
    echo 'buildah not found' 1>&2
    exit 65
fi
if ( ! command -v runc >/dev/null 2>&1 ); then
    echo 'runc not found' 1>&2
    exit 65
fi

# Basic registries.conf file; needed for Buildah to use public Docker Hub.
registries_conf=$(cat <<'EOF'
[registries.search]
registries = ['docker.io']
EOF
)

# Build image in Buildah local storage. (Note: This hangs after "Storing
# signatures" if $PWD is not $srcdir.)
buildah --root "${workdir}/storage" --runroot "${workdir}/runroot" \
        --registries-conf <(echo "$registries_conf") \
        build-using-dockerfile \
        --build-arg HTTP_PROXY="$HTTP_PROXY" \
        --build-arg HTTPS_PROXY="$HTTPS_PROXY" \
        --build-arg NO_PROXY="$NO_PROXY" \
        --build-arg http_proxy="$http_proxy" \
        --build-arg https_proxy="$https_proxy" \
        --build-arg no_proxy="$no_proxy" \
        --squash --layers=true -t $tag -f ./Dockerfile.${tag} .

cd "$workdir"

# Export an OCI image directory.
buildah --root ./storage --runroot ./runroot push $tag "oci:./oci"

# Extract the tarball containing the single-layer image from the OCI directory.
manifest=$(sed -E 's|^.+"application/vnd.oci.image.manifest.v1\+json","digest":"sha256:([0-9a-f]+)".+$|\1|' oci/index.json)
echo "manifest: ${manifest}"
layer_ct=$(grep -Eo 'application/vnd.oci.image.layer.v1.tar\+gzip' \
                    "oci/blobs/sha256/${manifest}" | wc -l)
if [[ $layer_ct -ne 1 ]]; then
    echo "one layer required; found $layer_ct" 1>&2
    exit 1
fi
layer=$(sed -E 's|^.+"application/vnd.oci.image.layer.v1.tar\+gzip","digest":"sha256:([0-9a-f]+)".+$|\1|' "oci/blobs/sha256/${manifest}")
echo "layer: ${layer}"

# Move the layer tarball to the output (not copy, because the OCI image will
# be deleted when we're done, so OK to break it).
mv "oci/blobs/sha256/${layer}" "$tarball_gz"
