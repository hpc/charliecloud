dist: trusty
sudo: required
language: c
compiler: gcc

# This defines a "matrix" of jobs. Each combination of environment variables
# defines a different job. They run in parallel, five at a time.
#
# FIXME: Each job starts with a cold Docker cache, which wastes work heating
# it up in parallel. It would be nice if "make test-build" could be done
# serially before splitting into parallel jobs.
#
#   TARBALL=         # build in Git checkout & use embedded Bats
#   TARBALL=archive  # build from "git archive" tarball & use system Bats
#   TARBALL=export   # build from "make export" tarball & use embedded Bats
#   INSTALL=         # run from build directory
#   INSTALL=yes      # make install to /usr/local, run that one
#
# Package builds can also be tested. In this case, INSTALL is ignored, as is
# the main test suite. These tests are much faster.
#
#   PKG_BUILD=yes    # build (but don't test) distribution packages, then exit
#   INSTALL_PV=yes   # install pv ("pipe view")
#
env:
# Package building (fast).
  - TARBALL=                     PKG_BUILD=yes
  - TARBALL=archive              PKG_BUILD=yes
# Complete matrix of TARBALL and INSTALL.
  - TARBALL=        INSTALL=
  - TARBALL=        INSTALL=yes
  - TARBALL=archive INSTALL=
  - TARBALL=archive INSTALL=yes
  - TARBALL=export  INSTALL=
  - TARBALL=export  INSTALL=yes
# Extra conditions
  - TARBALL=        INSTALL=     INSTALL_PV=yes
# One full-scope test. This will finish last by a lot.
# (Disabled because it gives a >10-minute gap in output, so Travis times out.)
#  - TARBALL=        INSTALL=     CH_TEST_SCOPE=full

install:
  - sudo apt-get install pigz
  - if [ -n "$INSTALL_PV" ]; then sudo apt-get install pv; fi
# We need Python 3 because Sphinx 1.8.0 doesn't work right under Python 2 (see
# issue #241). Travis provides images pre-installed with Python 3, but it's in
# a virtualenv and unavailable by default under sudo, in package builds, and
# maybe elsewhere. It's simpler and fast enough to install it with apt-get.
#
# Note: We get errors about "async def" in the Jinja2 dependency install,
# because Python 3.4 from Trusty doesn't support that syntax, but these seem
# to have no later effect.
  - sudo apt-get install python3-pip
  - pip3 --version
  - sudo pip3 install sphinx sphinx-rtd-theme
# Ubuntu Trusty symlinks /dev/shm -> /run/shm; the latter is unavailable after
# entering the namespaces and we get ENOENT. Work around this bug. See:
# https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=851427
# https://wiki.debian.org/ReleaseGoals/RunDirectory
  - sudo rm /dev/shm  # will fail once it's a directory again
  - sudo mkdir /dev/shm
  - sudo mount --bind /run/shm /dev/shm
# The following is the mess needed to get a working ShellCheck on Travis.
# Approaches that don't work include:
#
#   - Static binary provided by ShellCheck upstream (0.5.0): Segfault due to
#     Trusty bug [1]. The described workaround didn't work for me.
#
#   - Compile from source (0.5.0): Build is supposedly very long (30 minutes)
#     and one must install the Haskell build environment.
#
#   - Travis-provided (0.4.6): Segfault again, I think for the same reason.
#
#   - Ubunty Trusty, i.e. plain "apt-get" (0.3.3): Super old.
#
#   - Debian Sid (0.4.7): glibc dependency too new, default dpkg can't read
#     the .deb because it's xz-compressed, and only gain one point release.
#
# Once Travis finally gets around to upgrading Ubuntu [2], we should just
# install the static binary.
#
# [1]: https://github.com/koalaman/shellcheck/issues/1053
# [2]: https://github.com/travis-ci/travis-ci/issues/5821
  - fgrep Trusty /etc/os-release
  - sudo rm -f /usr/local/bin/shellcheck
  - wget http://mirrors.kernel.org/ubuntu/pool/universe/s/shellcheck/shellcheck_0.4.6-1_amd64.deb
  - sudo dpkg --install shellcheck_0.4.6-1_amd64.deb
  - which shellcheck
  - shellcheck --version

before_script:
  - getconf _NPROCESSORS_ONLN
  - free -m
  - df -h
  - df -h /var/tmp
  - export CH_TEST_TARDIR=/var/tmp/tarballs
  - export CH_TEST_IMGDIR=/var/tmp/images
  - export CH_TEST_PERMDIRS='/var/tmp /run'
  - unset JAVA_HOME  # otherwise Spark tries to use host's Java
  - for d in $CH_TEST_PERMDIRS; do sudo test/make-perms-test $d $USER nobody; done

script:
  - test/travis.sh

after_script:
  - free -m
  - df -h
