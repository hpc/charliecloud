dist: xenial
sudo: required
language: c
compiler: gcc

# This defines a "matrix" of jobs. Each combination of environment variables
# defines a different job. They run in parallel, five at a time. We have
# divided the matrix into "stages"; if any stage has a failure, testing stops
# and the remaining stages are skipped. Note that some stages are conditional.
#
# We do not do any full-scope tests, because they give a >10-minute gap in
# output, so Travis times out.
#
# FIXME: Each job starts with a cold Docker cache, which wastes work heating
# it up in parallel. It would be nice if "make test-build" could be done
# serially before splitting into parallel jobs.
#
#   TARBALL=              # build in Git checkout & use embedded Bats
#   TARBALL=archive       # build from "git archive" tarball & use system Bats
#   TARBALL=export        # build from "make export" tarball & use system Bats
#   TARBALL=export-bats   # build from "make export" tarball & use embedded Bats
#   INSTALL=              # run from build directory
#   INSTALL=yes           # make install to /usr/local, run that one
#
# Additional options:
#
#   CH_BUILDER              # which builder to use
#   MINIMAL_DEPS            # test with minimal dependencies (no fancy tools)
#   SUDO_RM_FIRST           # remove sudo before build (implied if non-Docker)
#   SUDO_RM_AFTER_BUILD     # remove sudo after build
#   SUDO_AVOID_AFTER_BUILD  # set CH_TEST_DONT_SUDO after build
#
stages:
  - quick
  - builders
  - install
  - misc
jobs:
  include:
    - stage: quick
      env:
        - CH_BUILDER=docker CH_TEST_SCOPE=quick
    - stage: builders
      env:
        - CH_BUILDER=buildah-runc
        - CH_BUILDER=buildah-setuid
        - CH_BUILDER=ch-grow
        - CH_BUILDER=docker
    - stage: install
      if: branch = master OR type = pull_request
      env:
        - CH_BUILDER=buildah-runc    TARBALL=export       INSTALL=yes
        - CH_BUILDER=buildah-setuid  TARBALL=export       INSTALL=yes
        - CH_BUILDER=ch-grow         TARBALL=export       INSTALL=yes
        - CH_BUILDER=docker          TARBALL=export       INSTALL=yes
        - CH_BUILDER=docker          TARBALL=export-bats  INSTALL=yes
    - stage: misc
      if: branch = master OR type = pull_request
      env:
        - CH_BUILDER=buildah-setuid  MINIMAL_DEPS=yes
        - CH_BUILDER=ch-grow         MINIMAL_DEPS=yes
        - CH_BUILDER=docker          MINIMAL_DEPS=yes
        - CH_BUILDER=docker          SUDO_RM_AFTER_BUILD=yes
        - CH_BUILDER=docker          SUDO_AVOID_AFTER_BUILD=yes

addons:
  apt:
    sources:
      - sourceline: 'ppa:projectatomic/ppa'
    packages:
      - python3-pip
      - python3-setuptools

install:
# Install conditional packages.
  - if [ -z "$MINIMAL_DEPS" ]; then
      sudo apt-get install pigz pv skopeo squashfuse;
    fi
  - if [ "$CH_BUILDER" = ch-grow ]; then
      sudo apt-get install skopeo;
      sudo pip3 install lark-parser;
    fi
# Project Atomic PPA provides buggy Buildah for Xenial, and we need Kevin's
# patched version, so build from source.
  - case $CH_BUILDER in;
      buildah*);
        add-apt-repository -y ppa:alexlarsson/flatpak;
        add-apt-repository -y ppa:gophers/archive;
        apt-get -y install libapparmor-dev libdevmapper-dev libglib2.0-dev \
                           libgpgme11-dev libostree-dev libseccomp-dev \
                           libselinux1-dev skopeo-containers go-md2man;
        apt-get -y install golang-1.10;
        which go; go --version;
        mkdir /usr/local/src/go;
        cd /usr/local/src/go;
        export GOPATH=$(pwd);
        git clone https://github.com/containers/buildah \
                  src/github.com/containers/buildah;
        cd src/github.com/containers/buildah;
        git checkout v1.9.0;
        make runc all SECURITYTAGS="apparmor seccomp";
        sudo make install install.runc;
        which buildah; buildah --version;
        which runc; runc --version;
        printf "[registries.search]\nregistries = ['docker.io']\n" \
               > /etc/containers/registries.conf;
      ;; ;
    esac
# umoci provides a binary build; no appropriate Ubuntu package for Xenial.
  - if [ -z "$MINIMAL_DEPS" ] || [ "$CH_BUILDER" = ch-grow ]; then
      wget -nv https://github.com/openSUSE/umoci/releases/download/v0.4.4/umoci.amd64;
      sudo chmod 755 umoci.amd64;
      sudo mv umoci.amd64 /usr/local/bin/umoci;
      umoci --version;
    fi
# We need Python 3 because Sphinx 1.8.0 doesn't work right under Python 2 (see
# issue #241). Travis provides images pre-installed with Python 3, but it's in
# a virtualenv and unavailable by default under sudo, in package builds, and
# maybe elsewhere. It's simpler and fast enough to install it with apt-get.
  - if [ -z "$MINIMAL_DEPS" ]; then
      sudo pip3 install sphinx sphinx-rtd-theme;
    fi

before_script:
  - getconf _NPROCESSORS_ONLN
  - free -m
  - df -h
  - df -h /var/tmp
  - export CH_TEST_TARDIR=/var/tmp/tarballs
  - export CH_TEST_IMGDIR=/var/tmp/images
  - export CH_TEST_PERMDIRS='/var/tmp /run'
  - unset JAVA_HOME  # otherwise Spark tries to use host's Java
  - for d in $CH_TEST_PERMDIRS; do
      sudo test/make-perms-test $d $USER nobody;
    done
  - test -n "$CH_BUILDER"  # no default builder for Travis
  - sudo usermod --add-subuids 10000-65536 $USER
  - sudo usermod --add-subgids 10000-65536 $USER
  - if [ "$CH_BUILDER" != docker ]; then
      export SUDO_RM_FIRST=yes;
      sudo rm $(command -v docker);
    fi

script:
  - test/travis.sh

after_script:
  - free -m
  - df -h
