#!/bin/bash

# chtest-make-auto prints bash automatic testing system (bats) file logic
# based on arguments and corresponding templates in test/make-auto.d/.
#
# This script is used by ch-test to generate the build_auto.bats and
# run_auto.bats test files and is not meant to be used by itself.
#
# The script takes a required argument, mode, and one or more paths ending with
# a basename of Dockerfile, Dockerfile.*, or Build.*. For example:
#
#   $0 build|run|tag ../examples/serial/hello/Dockerfile \
#                     ./Dockerfile.alpine39 \
#                     ./Build.docker_pull
#
# Note the CH_TEST_SCOPE environment variable must be set for chtest-make-auto
# to work.

set -e

fatal () {
    printf "error: %s\n" "$1" >&2
    exit 1
}

tag_from_path () {
    dir=$(basename "$(dirname "$1")")  # last directory only
    base=$(basename "$1")
    basicname=${base%%.*}
    extension=${base##*.}

    if [[ $extension == "$basicname" ]]; then
        extension=''
    else
        extension=${extension/\./} # remove dot
    fi

    case $basicname in
        Build|Dockerfile)
            case $dir in
                .|test|examples)  # dot is directory "test"
                    if [[ -z $extension ]]; then
                        fatal "can't compute tag: $1"
                    else
                        tag=$extension
                    fi
                    ;;
                *)
                    if [[ -z $extension ]]; then
                        tag=$(basename "$dir")
                    else
                        tag=$(basename "${dir}-${extension}")
                    fi
            esac
            ;;
        *)
            fatal "chtest-make-auto: invalid basic name '$basicname'"
    esac
    echo "$tag"
}

template_print () {
    template="./make-auto.d/$1"

    cat "$template" | sed "s@%(basename)s@$basename_@g" \
                    | sed "s@%(dirname)s@$dirname_@g" \
                    | sed "s@%(path)s@$path_@g" \
                    | sed "s@%(scope)s@$scope@g" \
                    | sed "s@%(tag)s@$tag@g"
    printf '\n'
    return
}

mode=$1; shift
scope=$CH_TEST_SCOPE

if [[ -z $CH_TEST_SCOPE ]]; then
    fatal "CH_TEST_SCOPE not set"
fi

if [[ -z $CHTEST_DIR ]]; then
    fatal "CHTEST_DIR not set"
fi

cd "$CHTEST_DIR"

if [[ $mode != tag ]]; then
    printf "# Do not edit this file; it's autogenerated\n\n"
    printf "load %s/common.bash\n\n" "$(dirname "${BASH_SOURCE[0]}")"
fi

while [[ "$#" -gt 0 ]]; do
    path_=$1;shift
    basename_=$(basename "$path_")
    dirname_=$(dirname "$path_")
    tag=$(tag_from_path "$path_")

    if [[ $dir == "" ]];then
        dir='.'
    fi

    if [[ $mode == tag ]]; then
        echo "$tag"
        exit 0
    fi

    if [[ $mode == build ]]; then
        if (echo "$basename_" | grep Build &> /dev/null); then
            template_print 'build_custom.bats.in'
        elif (echo "$basename_" | grep Docker &> /dev/null); then
            template_print 'build.bats.in'
            template_print 'builder_to_archive.bats.in'
        else
            fatal "chtest-make-auto: unknown build type"
        fi
    elif [[ $mode == run ]];then
        template_print 'unpack.bats.in'
        template_print 'run_image.bats.in'
    else
         fatal "chtest-make-auto: invalid mode '$mode'"
    fi
done
