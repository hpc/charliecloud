# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import cri_pb2 as cri__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in cri_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class RuntimeServiceStub(object):
    """Runtime service defines the public APIs for remote container runtimes
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Version = channel.unary_unary(
                '/runtime.v1.RuntimeService/Version',
                request_serializer=cri__pb2.VersionRequest.SerializeToString,
                response_deserializer=cri__pb2.VersionResponse.FromString,
                _registered_method=True)
        self.RunPodSandbox = channel.unary_unary(
                '/runtime.v1.RuntimeService/RunPodSandbox',
                request_serializer=cri__pb2.RunPodSandboxRequest.SerializeToString,
                response_deserializer=cri__pb2.RunPodSandboxResponse.FromString,
                _registered_method=True)
        self.StopPodSandbox = channel.unary_unary(
                '/runtime.v1.RuntimeService/StopPodSandbox',
                request_serializer=cri__pb2.StopPodSandboxRequest.SerializeToString,
                response_deserializer=cri__pb2.StopPodSandboxResponse.FromString,
                _registered_method=True)
        self.RemovePodSandbox = channel.unary_unary(
                '/runtime.v1.RuntimeService/RemovePodSandbox',
                request_serializer=cri__pb2.RemovePodSandboxRequest.SerializeToString,
                response_deserializer=cri__pb2.RemovePodSandboxResponse.FromString,
                _registered_method=True)
        self.PodSandboxStatus = channel.unary_unary(
                '/runtime.v1.RuntimeService/PodSandboxStatus',
                request_serializer=cri__pb2.PodSandboxStatusRequest.SerializeToString,
                response_deserializer=cri__pb2.PodSandboxStatusResponse.FromString,
                _registered_method=True)
        self.ListPodSandbox = channel.unary_unary(
                '/runtime.v1.RuntimeService/ListPodSandbox',
                request_serializer=cri__pb2.ListPodSandboxRequest.SerializeToString,
                response_deserializer=cri__pb2.ListPodSandboxResponse.FromString,
                _registered_method=True)
        self.CreateContainer = channel.unary_unary(
                '/runtime.v1.RuntimeService/CreateContainer',
                request_serializer=cri__pb2.CreateContainerRequest.SerializeToString,
                response_deserializer=cri__pb2.CreateContainerResponse.FromString,
                _registered_method=True)
        self.StartContainer = channel.unary_unary(
                '/runtime.v1.RuntimeService/StartContainer',
                request_serializer=cri__pb2.StartContainerRequest.SerializeToString,
                response_deserializer=cri__pb2.StartContainerResponse.FromString,
                _registered_method=True)
        self.StopContainer = channel.unary_unary(
                '/runtime.v1.RuntimeService/StopContainer',
                request_serializer=cri__pb2.StopContainerRequest.SerializeToString,
                response_deserializer=cri__pb2.StopContainerResponse.FromString,
                _registered_method=True)
        self.RemoveContainer = channel.unary_unary(
                '/runtime.v1.RuntimeService/RemoveContainer',
                request_serializer=cri__pb2.RemoveContainerRequest.SerializeToString,
                response_deserializer=cri__pb2.RemoveContainerResponse.FromString,
                _registered_method=True)
        self.ListContainers = channel.unary_unary(
                '/runtime.v1.RuntimeService/ListContainers',
                request_serializer=cri__pb2.ListContainersRequest.SerializeToString,
                response_deserializer=cri__pb2.ListContainersResponse.FromString,
                _registered_method=True)
        self.ContainerStatus = channel.unary_unary(
                '/runtime.v1.RuntimeService/ContainerStatus',
                request_serializer=cri__pb2.ContainerStatusRequest.SerializeToString,
                response_deserializer=cri__pb2.ContainerStatusResponse.FromString,
                _registered_method=True)
        self.UpdateContainerResources = channel.unary_unary(
                '/runtime.v1.RuntimeService/UpdateContainerResources',
                request_serializer=cri__pb2.UpdateContainerResourcesRequest.SerializeToString,
                response_deserializer=cri__pb2.UpdateContainerResourcesResponse.FromString,
                _registered_method=True)
        self.ReopenContainerLog = channel.unary_unary(
                '/runtime.v1.RuntimeService/ReopenContainerLog',
                request_serializer=cri__pb2.ReopenContainerLogRequest.SerializeToString,
                response_deserializer=cri__pb2.ReopenContainerLogResponse.FromString,
                _registered_method=True)
        self.ExecSync = channel.unary_unary(
                '/runtime.v1.RuntimeService/ExecSync',
                request_serializer=cri__pb2.ExecSyncRequest.SerializeToString,
                response_deserializer=cri__pb2.ExecSyncResponse.FromString,
                _registered_method=True)
        self.Exec = channel.unary_unary(
                '/runtime.v1.RuntimeService/Exec',
                request_serializer=cri__pb2.ExecRequest.SerializeToString,
                response_deserializer=cri__pb2.ExecResponse.FromString,
                _registered_method=True)
        self.Attach = channel.unary_unary(
                '/runtime.v1.RuntimeService/Attach',
                request_serializer=cri__pb2.AttachRequest.SerializeToString,
                response_deserializer=cri__pb2.AttachResponse.FromString,
                _registered_method=True)
        self.PortForward = channel.unary_unary(
                '/runtime.v1.RuntimeService/PortForward',
                request_serializer=cri__pb2.PortForwardRequest.SerializeToString,
                response_deserializer=cri__pb2.PortForwardResponse.FromString,
                _registered_method=True)
        self.ContainerStats = channel.unary_unary(
                '/runtime.v1.RuntimeService/ContainerStats',
                request_serializer=cri__pb2.ContainerStatsRequest.SerializeToString,
                response_deserializer=cri__pb2.ContainerStatsResponse.FromString,
                _registered_method=True)
        self.ListContainerStats = channel.unary_unary(
                '/runtime.v1.RuntimeService/ListContainerStats',
                request_serializer=cri__pb2.ListContainerStatsRequest.SerializeToString,
                response_deserializer=cri__pb2.ListContainerStatsResponse.FromString,
                _registered_method=True)
        self.PodSandboxStats = channel.unary_unary(
                '/runtime.v1.RuntimeService/PodSandboxStats',
                request_serializer=cri__pb2.PodSandboxStatsRequest.SerializeToString,
                response_deserializer=cri__pb2.PodSandboxStatsResponse.FromString,
                _registered_method=True)
        self.ListPodSandboxStats = channel.unary_unary(
                '/runtime.v1.RuntimeService/ListPodSandboxStats',
                request_serializer=cri__pb2.ListPodSandboxStatsRequest.SerializeToString,
                response_deserializer=cri__pb2.ListPodSandboxStatsResponse.FromString,
                _registered_method=True)
        self.UpdateRuntimeConfig = channel.unary_unary(
                '/runtime.v1.RuntimeService/UpdateRuntimeConfig',
                request_serializer=cri__pb2.UpdateRuntimeConfigRequest.SerializeToString,
                response_deserializer=cri__pb2.UpdateRuntimeConfigResponse.FromString,
                _registered_method=True)
        self.Status = channel.unary_unary(
                '/runtime.v1.RuntimeService/Status',
                request_serializer=cri__pb2.StatusRequest.SerializeToString,
                response_deserializer=cri__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.CheckpointContainer = channel.unary_unary(
                '/runtime.v1.RuntimeService/CheckpointContainer',
                request_serializer=cri__pb2.CheckpointContainerRequest.SerializeToString,
                response_deserializer=cri__pb2.CheckpointContainerResponse.FromString,
                _registered_method=True)
        self.GetContainerEvents = channel.unary_stream(
                '/runtime.v1.RuntimeService/GetContainerEvents',
                request_serializer=cri__pb2.GetEventsRequest.SerializeToString,
                response_deserializer=cri__pb2.ContainerEventResponse.FromString,
                _registered_method=True)
        self.ListMetricDescriptors = channel.unary_unary(
                '/runtime.v1.RuntimeService/ListMetricDescriptors',
                request_serializer=cri__pb2.ListMetricDescriptorsRequest.SerializeToString,
                response_deserializer=cri__pb2.ListMetricDescriptorsResponse.FromString,
                _registered_method=True)
        self.ListPodSandboxMetrics = channel.unary_unary(
                '/runtime.v1.RuntimeService/ListPodSandboxMetrics',
                request_serializer=cri__pb2.ListPodSandboxMetricsRequest.SerializeToString,
                response_deserializer=cri__pb2.ListPodSandboxMetricsResponse.FromString,
                _registered_method=True)
        self.RuntimeConfig = channel.unary_unary(
                '/runtime.v1.RuntimeService/RuntimeConfig',
                request_serializer=cri__pb2.RuntimeConfigRequest.SerializeToString,
                response_deserializer=cri__pb2.RuntimeConfigResponse.FromString,
                _registered_method=True)


class RuntimeServiceServicer(object):
    """Runtime service defines the public APIs for remote container runtimes
    """

    def Version(self, request, context):
        """Version returns the runtime name, runtime version, and runtime API version.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunPodSandbox(self, request, context):
        """RunPodSandbox creates and starts a pod-level sandbox. Runtimes must ensure
        the sandbox is in the ready state on success.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopPodSandbox(self, request, context):
        """StopPodSandbox stops any running process that is part of the sandbox and
        reclaims network resources (e.g., IP addresses) allocated to the sandbox.
        If there are any running containers in the sandbox, they must be forcibly
        terminated.
        This call is idempotent, and must not return an error if all relevant
        resources have already been reclaimed. kubelet will call StopPodSandbox
        at least once before calling RemovePodSandbox. It will also attempt to
        reclaim resources eagerly, as soon as a sandbox is not needed. Hence,
        multiple StopPodSandbox calls are expected.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemovePodSandbox(self, request, context):
        """RemovePodSandbox removes the sandbox. If there are any running containers
        in the sandbox, they must be forcibly terminated and removed.
        This call is idempotent, and must not return an error if the sandbox has
        already been removed.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PodSandboxStatus(self, request, context):
        """PodSandboxStatus returns the status of the PodSandbox. If the PodSandbox is not
        present, returns an error.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPodSandbox(self, request, context):
        """ListPodSandbox returns a list of PodSandboxes.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateContainer(self, request, context):
        """CreateContainer creates a new container in specified PodSandbox
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartContainer(self, request, context):
        """StartContainer starts the container.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopContainer(self, request, context):
        """StopContainer stops a running container with a grace period (i.e., timeout).
        This call is idempotent, and must not return an error if the container has
        already been stopped.
        The runtime must forcibly kill the container after the grace period is
        reached.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveContainer(self, request, context):
        """RemoveContainer removes the container. If the container is running, the
        container must be forcibly removed.
        This call is idempotent, and must not return an error if the container has
        already been removed.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListContainers(self, request, context):
        """ListContainers lists all containers by filters.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ContainerStatus(self, request, context):
        """ContainerStatus returns status of the container. If the container is not
        present, returns an error.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateContainerResources(self, request, context):
        """UpdateContainerResources updates ContainerConfig of the container synchronously.
        If runtime fails to transactionally update the requested resources, an error is returned.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReopenContainerLog(self, request, context):
        """ReopenContainerLog asks runtime to reopen the stdout/stderr log file
        for the container. This is often called after the log file has been
        rotated. If the container is not running, container runtime can choose
        to either create a new log file and return nil, or return an error.
        Once it returns error, new container log file MUST NOT be created.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecSync(self, request, context):
        """ExecSync runs a command in a container synchronously.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Exec(self, request, context):
        """Exec prepares a streaming endpoint to execute a command in the container.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Attach(self, request, context):
        """Attach prepares a streaming endpoint to attach to a running container.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PortForward(self, request, context):
        """PortForward prepares a streaming endpoint to forward ports from a PodSandbox.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ContainerStats(self, request, context):
        """ContainerStats returns stats of the container. If the container does not
        exist, the call returns an error.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListContainerStats(self, request, context):
        """ListContainerStats returns stats of all running containers.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PodSandboxStats(self, request, context):
        """PodSandboxStats returns stats of the pod sandbox. If the pod sandbox does not
        exist, the call returns an error.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPodSandboxStats(self, request, context):
        """ListPodSandboxStats returns stats of the pod sandboxes matching a filter.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRuntimeConfig(self, request, context):
        """UpdateRuntimeConfig updates the runtime configuration based on the given request.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Status(self, request, context):
        """Status returns the status of the runtime.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckpointContainer(self, request, context):
        """CheckpointContainer checkpoints a container
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetContainerEvents(self, request, context):
        """GetContainerEvents gets container events from the CRI runtime
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListMetricDescriptors(self, request, context):
        """ListMetricDescriptors gets the descriptors for the metrics that will be returned in ListPodSandboxMetrics.
        This list should be static at startup: either the client and server restart together when
        adding or removing metrics descriptors, or they should not change.
        Put differently, if ListPodSandboxMetrics references a name that is not described in the initial
        ListMetricDescriptors call, then the metric will not be broadcasted.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPodSandboxMetrics(self, request, context):
        """ListPodSandboxMetrics gets pod sandbox metrics from CRI Runtime
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RuntimeConfig(self, request, context):
        """RuntimeConfig returns configuration information of the runtime.
        A couple of notes:
        - The RuntimeConfigRequest object is not to be confused with the contents of UpdateRuntimeConfigRequest.
        The former is for having runtime tell Kubelet what to do, the latter vice versa.
        - It is the expectation of the Kubelet that these fields are static for the lifecycle of the Kubelet.
        The Kubelet will not re-request the RuntimeConfiguration after startup, and CRI implementations should
        avoid updating them without a full node reboot.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RuntimeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Version': grpc.unary_unary_rpc_method_handler(
                    servicer.Version,
                    request_deserializer=cri__pb2.VersionRequest.FromString,
                    response_serializer=cri__pb2.VersionResponse.SerializeToString,
            ),
            'RunPodSandbox': grpc.unary_unary_rpc_method_handler(
                    servicer.RunPodSandbox,
                    request_deserializer=cri__pb2.RunPodSandboxRequest.FromString,
                    response_serializer=cri__pb2.RunPodSandboxResponse.SerializeToString,
            ),
            'StopPodSandbox': grpc.unary_unary_rpc_method_handler(
                    servicer.StopPodSandbox,
                    request_deserializer=cri__pb2.StopPodSandboxRequest.FromString,
                    response_serializer=cri__pb2.StopPodSandboxResponse.SerializeToString,
            ),
            'RemovePodSandbox': grpc.unary_unary_rpc_method_handler(
                    servicer.RemovePodSandbox,
                    request_deserializer=cri__pb2.RemovePodSandboxRequest.FromString,
                    response_serializer=cri__pb2.RemovePodSandboxResponse.SerializeToString,
            ),
            'PodSandboxStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.PodSandboxStatus,
                    request_deserializer=cri__pb2.PodSandboxStatusRequest.FromString,
                    response_serializer=cri__pb2.PodSandboxStatusResponse.SerializeToString,
            ),
            'ListPodSandbox': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPodSandbox,
                    request_deserializer=cri__pb2.ListPodSandboxRequest.FromString,
                    response_serializer=cri__pb2.ListPodSandboxResponse.SerializeToString,
            ),
            'CreateContainer': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateContainer,
                    request_deserializer=cri__pb2.CreateContainerRequest.FromString,
                    response_serializer=cri__pb2.CreateContainerResponse.SerializeToString,
            ),
            'StartContainer': grpc.unary_unary_rpc_method_handler(
                    servicer.StartContainer,
                    request_deserializer=cri__pb2.StartContainerRequest.FromString,
                    response_serializer=cri__pb2.StartContainerResponse.SerializeToString,
            ),
            'StopContainer': grpc.unary_unary_rpc_method_handler(
                    servicer.StopContainer,
                    request_deserializer=cri__pb2.StopContainerRequest.FromString,
                    response_serializer=cri__pb2.StopContainerResponse.SerializeToString,
            ),
            'RemoveContainer': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveContainer,
                    request_deserializer=cri__pb2.RemoveContainerRequest.FromString,
                    response_serializer=cri__pb2.RemoveContainerResponse.SerializeToString,
            ),
            'ListContainers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListContainers,
                    request_deserializer=cri__pb2.ListContainersRequest.FromString,
                    response_serializer=cri__pb2.ListContainersResponse.SerializeToString,
            ),
            'ContainerStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.ContainerStatus,
                    request_deserializer=cri__pb2.ContainerStatusRequest.FromString,
                    response_serializer=cri__pb2.ContainerStatusResponse.SerializeToString,
            ),
            'UpdateContainerResources': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateContainerResources,
                    request_deserializer=cri__pb2.UpdateContainerResourcesRequest.FromString,
                    response_serializer=cri__pb2.UpdateContainerResourcesResponse.SerializeToString,
            ),
            'ReopenContainerLog': grpc.unary_unary_rpc_method_handler(
                    servicer.ReopenContainerLog,
                    request_deserializer=cri__pb2.ReopenContainerLogRequest.FromString,
                    response_serializer=cri__pb2.ReopenContainerLogResponse.SerializeToString,
            ),
            'ExecSync': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecSync,
                    request_deserializer=cri__pb2.ExecSyncRequest.FromString,
                    response_serializer=cri__pb2.ExecSyncResponse.SerializeToString,
            ),
            'Exec': grpc.unary_unary_rpc_method_handler(
                    servicer.Exec,
                    request_deserializer=cri__pb2.ExecRequest.FromString,
                    response_serializer=cri__pb2.ExecResponse.SerializeToString,
            ),
            'Attach': grpc.unary_unary_rpc_method_handler(
                    servicer.Attach,
                    request_deserializer=cri__pb2.AttachRequest.FromString,
                    response_serializer=cri__pb2.AttachResponse.SerializeToString,
            ),
            'PortForward': grpc.unary_unary_rpc_method_handler(
                    servicer.PortForward,
                    request_deserializer=cri__pb2.PortForwardRequest.FromString,
                    response_serializer=cri__pb2.PortForwardResponse.SerializeToString,
            ),
            'ContainerStats': grpc.unary_unary_rpc_method_handler(
                    servicer.ContainerStats,
                    request_deserializer=cri__pb2.ContainerStatsRequest.FromString,
                    response_serializer=cri__pb2.ContainerStatsResponse.SerializeToString,
            ),
            'ListContainerStats': grpc.unary_unary_rpc_method_handler(
                    servicer.ListContainerStats,
                    request_deserializer=cri__pb2.ListContainerStatsRequest.FromString,
                    response_serializer=cri__pb2.ListContainerStatsResponse.SerializeToString,
            ),
            'PodSandboxStats': grpc.unary_unary_rpc_method_handler(
                    servicer.PodSandboxStats,
                    request_deserializer=cri__pb2.PodSandboxStatsRequest.FromString,
                    response_serializer=cri__pb2.PodSandboxStatsResponse.SerializeToString,
            ),
            'ListPodSandboxStats': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPodSandboxStats,
                    request_deserializer=cri__pb2.ListPodSandboxStatsRequest.FromString,
                    response_serializer=cri__pb2.ListPodSandboxStatsResponse.SerializeToString,
            ),
            'UpdateRuntimeConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRuntimeConfig,
                    request_deserializer=cri__pb2.UpdateRuntimeConfigRequest.FromString,
                    response_serializer=cri__pb2.UpdateRuntimeConfigResponse.SerializeToString,
            ),
            'Status': grpc.unary_unary_rpc_method_handler(
                    servicer.Status,
                    request_deserializer=cri__pb2.StatusRequest.FromString,
                    response_serializer=cri__pb2.StatusResponse.SerializeToString,
            ),
            'CheckpointContainer': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckpointContainer,
                    request_deserializer=cri__pb2.CheckpointContainerRequest.FromString,
                    response_serializer=cri__pb2.CheckpointContainerResponse.SerializeToString,
            ),
            'GetContainerEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.GetContainerEvents,
                    request_deserializer=cri__pb2.GetEventsRequest.FromString,
                    response_serializer=cri__pb2.ContainerEventResponse.SerializeToString,
            ),
            'ListMetricDescriptors': grpc.unary_unary_rpc_method_handler(
                    servicer.ListMetricDescriptors,
                    request_deserializer=cri__pb2.ListMetricDescriptorsRequest.FromString,
                    response_serializer=cri__pb2.ListMetricDescriptorsResponse.SerializeToString,
            ),
            'ListPodSandboxMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPodSandboxMetrics,
                    request_deserializer=cri__pb2.ListPodSandboxMetricsRequest.FromString,
                    response_serializer=cri__pb2.ListPodSandboxMetricsResponse.SerializeToString,
            ),
            'RuntimeConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.RuntimeConfig,
                    request_deserializer=cri__pb2.RuntimeConfigRequest.FromString,
                    response_serializer=cri__pb2.RuntimeConfigResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'runtime.v1.RuntimeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('runtime.v1.RuntimeService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RuntimeService(object):
    """Runtime service defines the public APIs for remote container runtimes
    """

    @staticmethod
    def Version(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.RuntimeService/Version',
            cri__pb2.VersionRequest.SerializeToString,
            cri__pb2.VersionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunPodSandbox(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.RuntimeService/RunPodSandbox',
            cri__pb2.RunPodSandboxRequest.SerializeToString,
            cri__pb2.RunPodSandboxResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopPodSandbox(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.RuntimeService/StopPodSandbox',
            cri__pb2.StopPodSandboxRequest.SerializeToString,
            cri__pb2.StopPodSandboxResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemovePodSandbox(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.RuntimeService/RemovePodSandbox',
            cri__pb2.RemovePodSandboxRequest.SerializeToString,
            cri__pb2.RemovePodSandboxResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PodSandboxStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.RuntimeService/PodSandboxStatus',
            cri__pb2.PodSandboxStatusRequest.SerializeToString,
            cri__pb2.PodSandboxStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListPodSandbox(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.RuntimeService/ListPodSandbox',
            cri__pb2.ListPodSandboxRequest.SerializeToString,
            cri__pb2.ListPodSandboxResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateContainer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.RuntimeService/CreateContainer',
            cri__pb2.CreateContainerRequest.SerializeToString,
            cri__pb2.CreateContainerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartContainer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.RuntimeService/StartContainer',
            cri__pb2.StartContainerRequest.SerializeToString,
            cri__pb2.StartContainerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopContainer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.RuntimeService/StopContainer',
            cri__pb2.StopContainerRequest.SerializeToString,
            cri__pb2.StopContainerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveContainer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.RuntimeService/RemoveContainer',
            cri__pb2.RemoveContainerRequest.SerializeToString,
            cri__pb2.RemoveContainerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListContainers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.RuntimeService/ListContainers',
            cri__pb2.ListContainersRequest.SerializeToString,
            cri__pb2.ListContainersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ContainerStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.RuntimeService/ContainerStatus',
            cri__pb2.ContainerStatusRequest.SerializeToString,
            cri__pb2.ContainerStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateContainerResources(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.RuntimeService/UpdateContainerResources',
            cri__pb2.UpdateContainerResourcesRequest.SerializeToString,
            cri__pb2.UpdateContainerResourcesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReopenContainerLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.RuntimeService/ReopenContainerLog',
            cri__pb2.ReopenContainerLogRequest.SerializeToString,
            cri__pb2.ReopenContainerLogResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecSync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.RuntimeService/ExecSync',
            cri__pb2.ExecSyncRequest.SerializeToString,
            cri__pb2.ExecSyncResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Exec(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.RuntimeService/Exec',
            cri__pb2.ExecRequest.SerializeToString,
            cri__pb2.ExecResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Attach(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.RuntimeService/Attach',
            cri__pb2.AttachRequest.SerializeToString,
            cri__pb2.AttachResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PortForward(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.RuntimeService/PortForward',
            cri__pb2.PortForwardRequest.SerializeToString,
            cri__pb2.PortForwardResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ContainerStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.RuntimeService/ContainerStats',
            cri__pb2.ContainerStatsRequest.SerializeToString,
            cri__pb2.ContainerStatsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListContainerStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.RuntimeService/ListContainerStats',
            cri__pb2.ListContainerStatsRequest.SerializeToString,
            cri__pb2.ListContainerStatsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PodSandboxStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.RuntimeService/PodSandboxStats',
            cri__pb2.PodSandboxStatsRequest.SerializeToString,
            cri__pb2.PodSandboxStatsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListPodSandboxStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.RuntimeService/ListPodSandboxStats',
            cri__pb2.ListPodSandboxStatsRequest.SerializeToString,
            cri__pb2.ListPodSandboxStatsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateRuntimeConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.RuntimeService/UpdateRuntimeConfig',
            cri__pb2.UpdateRuntimeConfigRequest.SerializeToString,
            cri__pb2.UpdateRuntimeConfigResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.RuntimeService/Status',
            cri__pb2.StatusRequest.SerializeToString,
            cri__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckpointContainer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.RuntimeService/CheckpointContainer',
            cri__pb2.CheckpointContainerRequest.SerializeToString,
            cri__pb2.CheckpointContainerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetContainerEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/runtime.v1.RuntimeService/GetContainerEvents',
            cri__pb2.GetEventsRequest.SerializeToString,
            cri__pb2.ContainerEventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListMetricDescriptors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.RuntimeService/ListMetricDescriptors',
            cri__pb2.ListMetricDescriptorsRequest.SerializeToString,
            cri__pb2.ListMetricDescriptorsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListPodSandboxMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.RuntimeService/ListPodSandboxMetrics',
            cri__pb2.ListPodSandboxMetricsRequest.SerializeToString,
            cri__pb2.ListPodSandboxMetricsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RuntimeConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.RuntimeService/RuntimeConfig',
            cri__pb2.RuntimeConfigRequest.SerializeToString,
            cri__pb2.RuntimeConfigResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ImageServiceStub(object):
    """ImageService defines the public APIs for managing images.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListImages = channel.unary_unary(
                '/runtime.v1.ImageService/ListImages',
                request_serializer=cri__pb2.ListImagesRequest.SerializeToString,
                response_deserializer=cri__pb2.ListImagesResponse.FromString,
                _registered_method=True)
        self.ImageStatus = channel.unary_unary(
                '/runtime.v1.ImageService/ImageStatus',
                request_serializer=cri__pb2.ImageStatusRequest.SerializeToString,
                response_deserializer=cri__pb2.ImageStatusResponse.FromString,
                _registered_method=True)
        self.PullImage = channel.unary_unary(
                '/runtime.v1.ImageService/PullImage',
                request_serializer=cri__pb2.PullImageRequest.SerializeToString,
                response_deserializer=cri__pb2.PullImageResponse.FromString,
                _registered_method=True)
        self.RemoveImage = channel.unary_unary(
                '/runtime.v1.ImageService/RemoveImage',
                request_serializer=cri__pb2.RemoveImageRequest.SerializeToString,
                response_deserializer=cri__pb2.RemoveImageResponse.FromString,
                _registered_method=True)
        self.ImageFsInfo = channel.unary_unary(
                '/runtime.v1.ImageService/ImageFsInfo',
                request_serializer=cri__pb2.ImageFsInfoRequest.SerializeToString,
                response_deserializer=cri__pb2.ImageFsInfoResponse.FromString,
                _registered_method=True)


class ImageServiceServicer(object):
    """ImageService defines the public APIs for managing images.
    """

    def ListImages(self, request, context):
        """ListImages lists existing images.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImageStatus(self, request, context):
        """ImageStatus returns the status of the image. If the image is not
        present, returns a response with ImageStatusResponse.Image set to
        nil.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PullImage(self, request, context):
        """PullImage pulls an image with authentication config.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveImage(self, request, context):
        """RemoveImage removes the image.
        This call is idempotent, and must not return an error if the image has
        already been removed.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImageFsInfo(self, request, context):
        """ImageFSInfo returns information of the filesystem that is used to store images.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ImageServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListImages': grpc.unary_unary_rpc_method_handler(
                    servicer.ListImages,
                    request_deserializer=cri__pb2.ListImagesRequest.FromString,
                    response_serializer=cri__pb2.ListImagesResponse.SerializeToString,
            ),
            'ImageStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.ImageStatus,
                    request_deserializer=cri__pb2.ImageStatusRequest.FromString,
                    response_serializer=cri__pb2.ImageStatusResponse.SerializeToString,
            ),
            'PullImage': grpc.unary_unary_rpc_method_handler(
                    servicer.PullImage,
                    request_deserializer=cri__pb2.PullImageRequest.FromString,
                    response_serializer=cri__pb2.PullImageResponse.SerializeToString,
            ),
            'RemoveImage': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveImage,
                    request_deserializer=cri__pb2.RemoveImageRequest.FromString,
                    response_serializer=cri__pb2.RemoveImageResponse.SerializeToString,
            ),
            'ImageFsInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.ImageFsInfo,
                    request_deserializer=cri__pb2.ImageFsInfoRequest.FromString,
                    response_serializer=cri__pb2.ImageFsInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'runtime.v1.ImageService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('runtime.v1.ImageService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ImageService(object):
    """ImageService defines the public APIs for managing images.
    """

    @staticmethod
    def ListImages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.ImageService/ListImages',
            cri__pb2.ListImagesRequest.SerializeToString,
            cri__pb2.ListImagesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ImageStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.ImageService/ImageStatus',
            cri__pb2.ImageStatusRequest.SerializeToString,
            cri__pb2.ImageStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PullImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.ImageService/PullImage',
            cri__pb2.PullImageRequest.SerializeToString,
            cri__pb2.PullImageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.ImageService/RemoveImage',
            cri__pb2.RemoveImageRequest.SerializeToString,
            cri__pb2.RemoveImageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ImageFsInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.v1.ImageService/ImageFsInfo',
            cri__pb2.ImageFsInfoRequest.SerializeToString,
            cri__pb2.ImageFsInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
